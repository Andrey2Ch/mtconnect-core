const Modbus = require('jsmodbus')
const net = require('net')

const options = {
  host: '192.168.1.120',
  port: 502
}

const socket = new net.Socket()
const client = new Modbus.client.TCP(socket)

console.log('üîÑ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ Adam-6050 –¥–ª—è —á—Ç–µ–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤...')

socket.on('connect', async function () {
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á—ë–Ω –∫ Adam-6050!')
  
  try {
    // –ß–∏—Ç–∞–µ–º –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã–µ –≤—Ö–æ–¥—ã (DI0-DI11)
    console.log('\nüìä –ß–∏—Ç–∞—é –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã–µ –≤—Ö–æ–¥—ã (DI0-DI11)...')
    const diResult = await client.readDiscreteInputs(0, 12)
    const diValues = diResult.response.body.valuesAsArray
    
    console.log('=== –î–ò–°–ö–†–ï–¢–ù–´–ï –í–•–û–î–´ ===')
    for (let i = 0; i < 12; i++) {
      console.log(`DI${i}: ${diValues[i] ? 'HIGH (1)' : 'LOW (0)'}`)
    }
    
    // –ß–∏—Ç–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è (Holding Registers) - —Ç—É—Ç –º–æ–≥—É—Ç –±—ã—Ç—å —Å—á—ë—Ç—á–∏–∫–∏
    console.log('\nüìä –ß–∏—Ç–∞—é —Ä–µ–≥–∏—Å—Ç—Ä—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è (—Å—á—ë—Ç—á–∏–∫–∏)...')
    const hrResult = await client.readHoldingRegisters(0, 12)
    const hrValues = hrResult.response.body.valuesAsArray
    
    console.log('\n=== –°–ß–Å–¢–ß–ò–ö–ò (Holding Registers) ===')
    for (let i = 0; i < 12; i++) {
      console.log(`HR${i}: ${hrValues[i]} (–∫–∞–Ω–∞–ª DI${i})`)
    }
    
    // –ß–∏—Ç–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã (Input Registers)
    console.log('\nüìä –ß–∏—Ç–∞—é –≤—Ö–æ–¥–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã...')
    const irResult = await client.readInputRegisters(0, 12)
    const irValues = irResult.response.body.valuesAsArray
    
    console.log('\n=== –í–•–û–î–ù–´–ï –†–ï–ì–ò–°–¢–†–´ ===')
    for (let i = 0; i < 12; i++) {
      console.log(`IR${i}: ${irValues[i]}`)
    }
    
    console.log('\n‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!')
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è:', err.message)
  }
  
  socket.end()
})

socket.on('error', function (err) {
  console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', err)
})

socket.connect(options) 