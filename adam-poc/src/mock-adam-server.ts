import * as net from 'net';

/**
 * Mock Modbus TCP Server –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ ADAM-6050
 * –≠–º—É–ª–∏—Ä—É–µ—Ç 16 Digital Inputs –∏ 16 Digital Outputs
 */
export class MockAdamServer {
    private server: net.Server;
    private digitalInputs: boolean[] = new Array(16).fill(false);
    private digitalOutputs: boolean[] = new Array(16).fill(false);
    private isRunning: boolean = false;

    constructor(private port: number = 502) {
        this.server = net.createServer(this.handleConnection.bind(this));
        this.setupRandomInputs();
    }

    /**
     * –ó–∞–ø—É—Å–∫ Mock —Å–µ—Ä–≤–µ—Ä–∞
     */
    async start(): Promise<void> {
        return new Promise((resolve, reject) => {
            this.server.listen(this.port, () => {
                this.isRunning = true;
                console.log(`üîß Mock ADAM-6050 —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${this.port}`);
                console.log('üìä –≠–º—É–ª–∏—Ä—É–µ–º 16 Digital Inputs + 16 Digital Outputs');
                resolve();
            });

            this.server.on('error', (err) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ Mock —Å–µ—Ä–≤–µ—Ä–∞:', err);
                reject(err);
            });
        });
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Mock —Å–µ—Ä–≤–µ—Ä–∞
     */
    async stop(): Promise<void> {
        return new Promise((resolve) => {
            if (this.isRunning) {
                this.server.close(() => {
                    this.isRunning = false;
                    console.log('üõë Mock ADAM-6050 —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                    resolve();
                });
            } else {
                resolve();
            }
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
     */
    private handleConnection(socket: net.Socket): void {
        console.log(`üîå –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: ${socket.remoteAddress}:${socket.remotePort}`);

        socket.on('data', (data) => {
            try {
                const response = this.processModbusRequest(data);
                socket.write(response);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Modbus –∑–∞–ø—Ä–æ—Å–∞:', error);
            }
        });

        socket.on('close', () => {
            console.log('üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è');
        });

        socket.on('error', (err) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º:', err);
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ Modbus TCP –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    private processModbusRequest(data: Buffer): Buffer {
        // –ü—Ä–æ—Å—Ç–∞—è —ç–º—É–ª—è—Ü–∏—è Modbus TCP –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–µ—Ä Modbus TCP
        
        if (data.length < 8) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ Modbus –∑–∞–ø—Ä–æ—Å–µ');
        }

        // Modbus TCP Header: Transaction ID (2) + Protocol ID (2) + Length (2) + Unit ID (1)
        const transactionId = data.readUInt16BE(0);
        const protocolId = data.readUInt16BE(2);
        const length = data.readUInt16BE(4);
        const unitId = data.readUInt8(6);
        const functionCode = data.readUInt8(7);

        console.log(`üì® Modbus –∑–∞–ø—Ä–æ—Å: Function=${functionCode}, Unit=${unitId}, Transaction=${transactionId}`);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π Modbus
        switch (functionCode) {
            case 0x02: // Read Discrete Inputs
                return this.handleReadDiscreteInputs(transactionId, unitId, data);
            case 0x01: // Read Coils (Digital Outputs)
                return this.handleReadCoils(transactionId, unitId, data);
            case 0x05: // Write Single Coil
                return this.handleWriteSingleCoil(transactionId, unitId, data);
            default:
                console.warn(`‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è Modbus —Ñ—É–Ω–∫—Ü–∏—è: ${functionCode}`);
                return this.createErrorResponse(transactionId, unitId, functionCode, 0x01); // Illegal Function
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —á—Ç–µ–Ω–∏—è Digital Inputs (Function Code 0x02)
     */
    private handleReadDiscreteInputs(transactionId: number, unitId: number, data: Buffer): Buffer {
        const startAddress = data.readUInt16BE(8);
        const quantity = data.readUInt16BE(10);

        console.log(`üì• –ß–∏—Ç–∞–µ–º Digital Inputs: –∞–¥—Ä–µ—Å=${startAddress}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ=${quantity}`);

        // –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –±–∏—Ç—ã –≤ –±–∞–π—Ç—ã
        const byteCount = Math.ceil(quantity / 8);
        const responseData = Buffer.alloc(byteCount);

        for (let i = 0; i < quantity && (startAddress + i) < this.digitalInputs.length; i++) {
            const byteIndex = Math.floor(i / 8);
            const bitIndex = i % 8;
            if (this.digitalInputs[startAddress + i]) {
                responseData[byteIndex] |= (1 << bitIndex);
            }
        }

        // –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
        const response = Buffer.alloc(9 + byteCount);
        response.writeUInt16BE(transactionId, 0);  // Transaction ID
        response.writeUInt16BE(0, 2);              // Protocol ID
        response.writeUInt16BE(3 + byteCount, 4);  // Length
        response.writeUInt8(unitId, 6);            // Unit ID
        response.writeUInt8(0x02, 7);              // Function Code
        response.writeUInt8(byteCount, 8);         // Byte Count
        responseData.copy(response, 9);            // Data

        return response;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —á—Ç–µ–Ω–∏—è Coils/Digital Outputs (Function Code 0x01)
     */
    private handleReadCoils(transactionId: number, unitId: number, data: Buffer): Buffer {
        const startAddress = data.readUInt16BE(8);
        const quantity = data.readUInt16BE(10);

        console.log(`üì§ –ß–∏—Ç–∞–µ–º Digital Outputs: –∞–¥—Ä–µ—Å=${startAddress}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ=${quantity}`);

        // –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –±–∏—Ç—ã –≤ –±–∞–π—Ç—ã
        const byteCount = Math.ceil(quantity / 8);
        const responseData = Buffer.alloc(byteCount);

        for (let i = 0; i < quantity && (startAddress + i) < this.digitalOutputs.length; i++) {
            const byteIndex = Math.floor(i / 8);
            const bitIndex = i % 8;
            if (this.digitalOutputs[startAddress + i]) {
                responseData[byteIndex] |= (1 << bitIndex);
            }
        }

        // –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
        const response = Buffer.alloc(9 + byteCount);
        response.writeUInt16BE(transactionId, 0);  // Transaction ID
        response.writeUInt16BE(0, 2);              // Protocol ID
        response.writeUInt16BE(3 + byteCount, 4);  // Length
        response.writeUInt8(unitId, 6);            // Unit ID
        response.writeUInt8(0x01, 7);              // Function Code
        response.writeUInt8(byteCount, 8);         // Byte Count
        responseData.copy(response, 9);            // Data

        return response;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –æ–¥–Ω–æ–≥–æ Coil (Function Code 0x05)
     */
    private handleWriteSingleCoil(transactionId: number, unitId: number, data: Buffer): Buffer {
        const address = data.readUInt16BE(8);
        const value = data.readUInt16BE(10);

        if (address < this.digitalOutputs.length) {
            this.digitalOutputs[address] = (value === 0xFF00);
            console.log(`‚úèÔ∏è –ó–∞–ø–∏—Å–∞–Ω Digital Output ${address}: ${this.digitalOutputs[address]}`);
        }

        // –≠—Ö–æ-–æ—Ç–≤–µ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏
        const response = Buffer.alloc(12);
        response.writeUInt16BE(transactionId, 0);  // Transaction ID
        response.writeUInt16BE(0, 2);              // Protocol ID
        response.writeUInt16BE(6, 4);              // Length
        response.writeUInt8(unitId, 6);            // Unit ID
        response.writeUInt8(0x05, 7);              // Function Code
        response.writeUInt16BE(address, 8);        // Address
        response.writeUInt16BE(value, 10);         // Value

        return response;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –æ—à–∏–±–∫–æ–π
     */
    private createErrorResponse(transactionId: number, unitId: number, functionCode: number, exceptionCode: number): Buffer {
        const response = Buffer.alloc(9);
        response.writeUInt16BE(transactionId, 0);           // Transaction ID
        response.writeUInt16BE(0, 2);                       // Protocol ID
        response.writeUInt16BE(3, 4);                       // Length
        response.writeUInt8(unitId, 6);                     // Unit ID
        response.writeUInt8(functionCode | 0x80, 7);        // Function Code + Error Flag
        response.writeUInt8(exceptionCode, 8);              // Exception Code

        return response;
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π Digital Inputs –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å—Ç–∞–Ω–∫–æ–≤
     */
    private setupRandomInputs(): void {
        setInterval(() => {
            // –°–ª—É—á–∞–π–Ω–æ –∏–∑–º–µ–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—Ö–æ–¥–æ–≤
            for (let i = 0; i < 3; i++) {
                const randomIndex = Math.floor(Math.random() * 16);
                this.digitalInputs[randomIndex] = Math.random() > 0.7;
            }
        }, 2000); // –ö–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ö–æ–¥–æ–≤/–≤—ã—Ö–æ–¥–æ–≤
     */
    getState() {
        return {
            digitalInputs: [...this.digitalInputs],
            digitalOutputs: [...this.digitalOutputs]
        };
    }
} 