import * as ModbusRTU from 'jsmodbus';
import { Socket } from 'net';

/**
 * ADAM-6050 Modbus TCP Client
 * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ADAM-6050 —á–µ—Ä–µ–∑ Modbus TCP –¥–ª—è —á—Ç–µ–Ω–∏—è Digital I/O
 */
export class AdamClient {
    private client: ModbusRTU.ModbusTCPClient;
    private socket: Socket;
    private keepAliveInterval: NodeJS.Timeout | null = null;
    private reconnectAttempts: number = 0;
    private readonly maxReconnectAttempts: number = 5;
    private readonly reconnectInterval: number = 5000; // 5 —Å–µ–∫—É–Ω–¥
    private readonly keepAliveIntervalMs: number = 30000; // 30 —Å–µ–∫—É–Ω–¥
    private _isConnected: boolean = false;

    constructor(
        private readonly ip: string,
        private readonly port: number = 502,
        private readonly unitId: number = 1
    ) {
        this.socket = new Socket();
        this.client = new ModbusRTU.client.TCP(this.socket, this.unitId);
        this.setupSocketEvents();
    }

    get isConnected(): boolean {
        return this._isConnected;
    }

    /**
     * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ADAM-6050
     */
    async connect(): Promise<void> {
        return new Promise((resolve, reject) => {
            console.log(`üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ADAM-6050 –Ω–∞ ${this.ip}:${this.port}...`);
            
            this.socket.connect(this.port, this.ip, () => {
                console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ ADAM-6050');
                this._isConnected = true;
                this.reconnectAttempts = 0;
                this.startKeepAlive();
                resolve();
            });

            // –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            const timeout = setTimeout(() => {
                reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ADAM-6050'));
            }, 10000);

            this.socket.once('connect', () => {
                clearTimeout(timeout);
            });

            this.socket.once('error', (err) => {
                clearTimeout(timeout);
                reject(err);
            });
        });
    }

    /**
     * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç ADAM-6050
     */
    async disconnect(): Promise<void> {
        return new Promise((resolve) => {
            this.stopKeepAlive();
            this._isConnected = false;
            
            this.socket.end(() => {
                console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç ADAM-6050');
                resolve();
            });
        });
    }

    /**
     * –ß—Ç–µ–Ω–∏–µ Digital Inputs (16 –∫–∞–Ω–∞–ª–æ–≤)
     * ADAM-6050 –∏–º–µ–µ—Ç 16 digital inputs –Ω–∞ –∞–¥—Ä–µ—Å–∞—Ö 0-15
     */
    async readDigitalInputs(): Promise<boolean[]> {
        return this.executeWithRetry(async () => {
            const response = await this.client.readDiscreteInputs(0, 16);
            return response.response.body.valuesAsArray.map(val => Boolean(val));
        });
    }

    /**
     * –ß—Ç–µ–Ω–∏–µ Digital Outputs (16 –∫–∞–Ω–∞–ª–æ–≤)
     * ADAM-6050 –∏–º–µ–µ—Ç 16 digital outputs –Ω–∞ –∞–¥—Ä–µ—Å–∞—Ö 0-15
     */
    async readDigitalOutputs(): Promise<boolean[]> {
        return this.executeWithRetry(async () => {
            const response = await this.client.readCoils(0, 16);
            return response.response.body.valuesAsArray.map(val => Boolean(val));
        });
    }

    /**
     * –ó–∞–ø–∏—Å—å –≤ Digital Outputs
     */
    async writeDigitalOutput(address: number, value: boolean): Promise<void> {
        return this.executeWithRetry(async () => {
            await this.client.writeSingleCoil(address, value);
        });
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
     */
    private async executeWithRetry<T>(
        operation: () => Promise<T>,
        maxRetries: number = 3
    ): Promise<T> {
        for (let attempt = 1; attempt <= maxRetries; attempt++) {
            try {
                if (!this._isConnected) {
                    throw new Error('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ADAM-6050');
                }
                return await operation();
            } catch (error) {
                console.warn(`‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ—É—Å–ø–µ—à–Ω–∞, –ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries}:`, error);
                
                if (attempt === maxRetries) {
                    throw error;
                }
                
                // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        }
        throw new Error('–≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π —Å–æ–∫–µ—Ç–∞
     */
    private setupSocketEvents(): void {
        this.socket.on('error', (err) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', err);
            this._isConnected = false;
            this.handleReconnect();
        });

        this.socket.on('close', () => {
            console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
            this._isConnected = false;
            this.handleReconnect();
        });

        this.socket.on('timeout', () => {
            console.warn('‚è∞ –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
            this._isConnected = false;
            this.socket.destroy();
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     */
    private async handleReconnect(): Promise<void> {
        if (this.reconnectAttempts < this.maxReconnectAttempts) {
            this.reconnectAttempts++;
            console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);
            
            setTimeout(async () => {
                try {
                    await this.connect();
                } catch (error) {
                    console.error('‚ùå –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ—É—Å–ø–µ—à–Ω–æ:', error);
                }
            }, this.reconnectInterval);
        } else {
            console.error('‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ Keep-Alive
     */
    private startKeepAlive(): void {
        if (this.keepAliveInterval) {
            clearInterval(this.keepAliveInterval);
        }
        
        this.keepAliveInterval = setInterval(() => {
            this.sendKeepAlive();
        }, this.keepAliveIntervalMs);
        
        console.log(`üíì Keep-Alive –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${this.keepAliveIntervalMs}ms)`);
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Keep-Alive
     */
    private stopKeepAlive(): void {
        if (this.keepAliveInterval) {
            clearInterval(this.keepAliveInterval);
            this.keepAliveInterval = null;
            console.log('üíì Keep-Alive –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ Keep-Alive –∑–∞–ø—Ä–æ—Å–∞
     */
    private async sendKeepAlive(): Promise<void> {
        try {
            // –ß–∏—Ç–∞–µ–º –æ–¥–∏–Ω digital input –∫–∞–∫ keep-alive –∑–∞–ø—Ä–æ—Å
            await this.client.readDiscreteInputs(0, 1);
            console.log('üíì Keep-Alive —É—Å–ø–µ—à–µ–Ω');
        } catch (error) {
            console.error('‚ùå Keep-Alive –Ω–µ—É—Å–ø–µ—à–µ–Ω:', error);
            this._isConnected = false;
            this.handleReconnect();
        }
    }
} 