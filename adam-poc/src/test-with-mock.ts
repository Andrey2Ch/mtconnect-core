import { AdamClient } from './AdamClient';
import { MockAdamServer } from './mock-adam-server';

/**
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç ADAM-6050 —Å Mock —Å–µ—Ä–≤–µ—Ä–æ–º
 * –ó–∞–ø—É—Å–∫: npm run dev
 */
async function testWithMockServer() {
    console.log('üß™ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç ADAM-6050 —Å Mock —Å–µ—Ä–≤–µ—Ä–æ–º');
    
    // –°–æ–∑–¥–∞–µ–º Mock —Å–µ—Ä–≤–µ—Ä
    const mockServer = new MockAdamServer(502);
    let client: AdamClient | null = null;
    
    try {
        // –ó–∞–ø—É—Å–∫–∞–µ–º Mock —Å–µ—Ä–≤–µ—Ä
        console.log('\nüîß –ó–∞–ø—É—Å–∫ Mock —Å–µ—Ä–≤–µ—Ä–∞...');
        await mockServer.start();
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç (–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ localhost, –≥–¥–µ –∑–∞–ø—É—â–µ–Ω Mock)
        console.log('\nüì° –°–æ–∑–¥–∞–Ω–∏–µ ADAM –∫–ª–∏–µ–Ω—Ç–∞...');
        client = new AdamClient('127.0.0.1', 502);
        
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        console.log('\nüì° –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Mock —Å–µ—Ä–≤–µ—Ä—É...');
        await client.connect();
        
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');
        
        // –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
        console.log('\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–µ —á—Ç–µ–Ω–∏–µ (–∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã)');
        console.log('–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C\n');
        
        let counter = 0;
        const interval = setInterval(async () => {
            try {
                counter++;
                console.log(`\n--- –ß—Ç–µ–Ω–∏–µ #${counter} ---`);
                
                                 if (!client) return;
                 
                 // –ß–∏—Ç–∞–µ–º Digital Inputs
                 const digitalInputs = await client.readDigitalInputs();
                 console.log('üì• Digital Inputs:', digitalInputs.map((val, idx) => `DI${idx}:${val ? '1' : '0'}`).join(' '));
                 
                 // –ß–∏—Ç–∞–µ–º Digital Outputs
                 const digitalOutputs = await client.readDigitalOutputs();
                 console.log('üì§ Digital Outputs:', digitalOutputs.map((val, idx) => `DO${idx}:${val ? '1' : '0'}`).join(' '));
                 
                 // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Mock —Å–µ—Ä–≤–µ—Ä–∞
                 const mockState = mockServer.getState();
                 const activeInputs = mockState.digitalInputs.filter(Boolean).length;
                 const activeOutputs = mockState.digitalOutputs.filter(Boolean).length;
                 console.log(`üìä Mock —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${activeInputs}/16 –≤—Ö–æ–¥–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã, ${activeOutputs}/16 –≤—ã—Ö–æ–¥–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã`);
                 
                 // –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ (–∫–∞–∂–¥—ã–µ 5 —á—Ç–µ–Ω–∏–π)
                 if (counter % 5 === 0) {
                     const testOutput = Math.floor(Math.random() * 16);
                     const testValue = Math.random() > 0.5;
                     console.log(`‚úèÔ∏è –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏: DO${testOutput} = ${testValue}`);
                     await client.writeDigitalOutput(testOutput, testValue);
                 }
                
                         } catch (error) {
                 console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏:', error instanceof Error ? error.message : String(error));
             }
        }, 3000);
        
        // Graceful shutdown
        process.on('SIGINT', async () => {
            console.log('\n\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');
            clearInterval(interval);
            
            if (client) {
                console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞...');
                await client.disconnect();
            }
            
            console.log('üîß –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Mock —Å–µ—Ä–≤–µ—Ä–∞...');
            await mockServer.stop();
            
            console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
            process.exit(0);
        });
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        
        // Cleanup
        if (client) {
            try {
                await client.disconnect();
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:', e);
            }
        }
        
        try {
            await mockServer.stop();
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Mock —Å–µ—Ä–≤–µ—Ä–∞:', e);
        }
        
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    testWithMockServer();
}

export { testWithMockServer }; 