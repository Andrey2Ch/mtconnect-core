# –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ Dashboard v2.0
Write-Host "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã..." -ForegroundColor Yellow

# 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –Ω—É–∂–Ω—ã—Ö –ø–æ—Ä—Ç–∞—Ö
$ports = @(3000, 3001)
foreach ($port in $ports) {
    $process = Get-NetTCPConnection -LocalPort $port -State Listen -ErrorAction SilentlyContinue
    if ($process) {
        $processId = $process.OwningProcess
        Write-Host "‚ùå –ü–æ—Ä—Ç $port –∑–∞–Ω—è—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–º $processId - —É–±–∏–≤–∞—é" -ForegroundColor Red
        Stop-Process -Id $processId -Force -ErrorAction SilentlyContinue
        Start-Sleep -Seconds 2
    }
}

# 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º MongoDB
Write-Host "üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ MongoDB..." -ForegroundColor Yellow
try {
    $mongoCheck = docker exec mtconnect-mongodb-simple mongosh mtconnect --eval "db.machine_data.countDocuments()" --quiet
    if ($mongoCheck -match '\d+') {
        Write-Host "‚úÖ MongoDB —Ä–∞–±–æ—Ç–∞–µ—Ç, –∑–∞–ø–∏—Å–µ–π: $($matches[0])" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ùå MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Red
    exit 1
}

# 3. –ó–∞–ø—É—Å–∫–∞–µ–º Edge Gateway (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
$edgeRunning = Get-Process -Name "node" -ErrorAction SilentlyContinue | Where-Object { $_.Path -like "*MTConnect*" }
if (-not $edgeRunning) {
    Write-Host "üöÄ –ó–∞–ø—É—Å–∫–∞—é Edge Gateway..." -ForegroundColor Yellow
    Start-Process powershell -ArgumentList "-Command", "cd '$PWD'; `$env:PORT='3000'; npm start" -WindowStyle Minimized
    Start-Sleep -Seconds 5
}

# 4. –ó–∞–ø—É—Å–∫–∞–µ–º Cloud API v2
Write-Host "üöÄ –ó–∞–ø—É—Å–∫–∞—é Cloud API v2..." -ForegroundColor Yellow
Set-Location "apps/cloud-api"
$env:PORT = '3001'

# –ü—Ä–æ–≤–µ—Ä—è–µ–º TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏—é
$buildResult = npm run build 2>&1
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ TypeScript:" -ForegroundColor Red
    Write-Host $buildResult -ForegroundColor Red
    Set-Location "../.."
    exit 1
}

# –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
Start-Process powershell -ArgumentList "-Command", "cd '$PWD'; `$env:PORT='3001'; npm run start:dev" -WindowStyle Minimized
Set-Location "../.."

# 5. –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
Write-Host "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..." -ForegroundColor Yellow
Start-Sleep -Seconds 10

# –ü—Ä–æ–≤–µ—Ä—è–µ–º API
try {
    $apiTest = Invoke-RestMethod -Uri "http://localhost:3001/api/v2/dashboard/machines" -TimeoutSec 5
    $machineCount = $apiTest.data.Count
    Write-Host "‚úÖ API v2 —Ä–∞–±–æ—Ç–∞–µ—Ç, –º–∞—à–∏–Ω: $machineCount" -ForegroundColor Green
    
    if ($machineCount -gt 0) {
        Write-Host "üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞!" -ForegroundColor Green
        Write-Host "üì± –î–∞—à–±–æ—Ä–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã:" -ForegroundColor Cyan
        Write-Host "   –°—Ç–∞—Ä—ã–π: http://localhost:3001/dashboard-new.html" -ForegroundColor Gray
        Write-Host "   –ù–æ–≤—ã–π:  http://localhost:3001/dashboard-v2.html" -ForegroundColor White
    } else {
        Write-Host "‚ö†Ô∏è API —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –º–∞—à–∏–Ω –Ω–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –≤ MongoDB" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ùå API v2 –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏." -ForegroundColor Red
    exit 1
} 