const { AdamReader } = require('./dist/adam-reader');

async function testAdamIntegration() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é Adam-6050...');
  
  const adamReader = new AdamReader();
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
    const isConnected = await adamReader.testConnection();
    
    if (!isConnected) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Adam-6050');
      return;
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');
    
    // –ß–∏—Ç–∞–µ–º —Å—á—ë—Ç—á–∏–∫–∏
    console.log('üìä –ß–∏—Ç–∞—é —Å—á—ë—Ç—á–∏–∫–∏ —Å—Ç–∞–Ω–∫–æ–≤...');
    const counters = await adamReader.readCounters();
    
    console.log('\n=== –°–ß–Å–¢–ß–ò–ö–ò –°–¢–ê–ù–ö–û–í ===');
    counters.forEach(counter => {
      console.log(`${counter.machineId}: ${counter.count} –¥–µ—Ç–∞–ª–µ–π (–∫–∞–Ω–∞–ª DI${counter.channel})`);
    });
    
    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìä –í—Å–µ–≥–æ —Å—Ç–∞–Ω–∫–æ–≤ —Å Adam-6050: ${counters.length}`);
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', err.message);
  }
}

testAdamIntegration(); 