// üß™ –¢–ï–°–¢–û–í–´–ô –°–ö–†–ò–ü–¢ –î–õ–Ø HTTP –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô –ö FANUC –ê–î–ê–ü–¢–ï–†–ê–ú
// –ê–Ω–∞–ª–æ–≥ –ø—Ä–æ—Å—Ç–æ–≥–æ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ –∏–∑ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ Fanuk_Test

const http = require('http');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞—à–∏–Ω (–∫–∞–∫ –≤ config.json)
const machines = [
    { id: 'M_1_XD-20', name: 'XD-20', port: 7701 },
    { id: 'M_2_SR_26', name: 'SR-26', port: 7702 },
    { id: 'M_3_XD_38', name: 'XD-38', port: 7703 },
    { id: 'M_4_SR_10', name: 'SR-10', port: 7704 },
    { id: 'M_5_DT_26', name: 'DT-26', port: 7705 },
    { id: 'M_6_SR_21', name: 'SR-21', port: 7706 },
    { id: 'M_7_SR_23', name: 'SR-23', port: 7707 },
    { id: 'M_8_SR_25', name: 'SR-25', port: 7708 }
];

/**
 * HTTP –∑–∞–ø—Ä–æ—Å –∫ –∞–¥–∞–ø—Ç–µ—Ä—É
 */
function makeHttpRequest(port, endpoint = '/current') {
    return new Promise((resolve, reject) => {
        const options = {
            hostname: 'localhost',
            port: port,
            path: endpoint,
            method: 'GET',
            timeout: 5000
        };

        const req = http.request(options, (res) => {
            let data = '';
            
            res.on('data', (chunk) => {
                data += chunk;
            });

            res.on('end', () => {
                resolve(data);
            });
        });

        req.on('error', (error) => {
            reject(error);
        });

        req.on('timeout', () => {
            req.destroy();
            reject(new Error('HTTP timeout'));
        });

        req.end();
    });
}

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ SHDR –¥–∞–Ω–Ω—ã—Ö –∏–∑ HTTP –æ—Ç–≤–µ—Ç–∞
 */
function parseMTConnectData(rawData, machineId) {
    try {
        const lines = rawData.split('\n');
        
        // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏
        let dataLine = '';
        for (let i = lines.length - 1; i >= 0; i--) {
            const line = lines[i].trim();
            if (line.includes('|avail|') || line.includes('|part_count|')) {
                dataLine = line;
                break;
            }
        }

        if (!dataLine) {
            return null;
        }

        // –ü–∞—Ä—Å–∏–º SHDR —Å—Ç—Ä–æ–∫—É
        const parts = dataLine.split('|');
        const timestamp = parts[0];
        const data = {};

        for (let i = 1; i < parts.length; i += 2) {
            if (i + 1 < parts.length) {
                data[parts[i]] = parts[i + 1];
            }
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        const programComment = data.program_comment || '';
        let program = data.program || '';
        
        if (programComment && programComment.includes('O')) {
            const match = programComment.match(/O(\d+)/);
            if (match) {
                const progNum = parseInt(match[1]);
                program = `${Math.floor(progNum / 1000)}.${progNum % 1000}`;
            }
        }

        return {
            machineId,
            partCount: parseInt(data.part_count) || 0,
            program: program,
            programComment: programComment,
            availability: data.avail || 'UNAVAILABLE',
            execution: data.execution || 'UNAVAILABLE',
            mode: data.mode || 'UNAVAILABLE',
            timestamp: new Date().toISOString()
        };

    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è ${machineId}:`, error.message);
        return null;
    }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–∞—à–∏–Ω
 */
async function testAllMachines() {
    console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ FANUC –∞–¥–∞–ø—Ç–µ—Ä–∞–º...\n');
    
    const results = [];
    
    for (const machine of machines) {
        try {
            console.log(`üîç –¢–µ—Å—Ç–∏—Ä—É—é ${machine.name} (localhost:${machine.port})...`);
            
            const rawData = await makeHttpRequest(machine.port);
            const parsed = parseMTConnectData(rawData, machine.id);
            
            if (parsed) {
                console.log(`  ‚úÖ ${machine.name}: ${parsed.partCount} –¥–µ—Ç–∞–ª–µ–π, –ø—Ä–æ–≥—Ä–∞–º–º–∞ ${parsed.program || 'N/A'}`);
                console.log(`     –°—Ç–∞—Ç—É—Å: ${parsed.availability}, –†–µ–∂–∏–º: ${parsed.mode}`);
                if (parsed.programComment) {
                    console.log(`     –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${parsed.programComment}`);
                }
                results.push(parsed);
            } else {
                console.log(`  ‚ö†Ô∏è  ${machine.name}: –Ω–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö`);
            }
            
        } catch (error) {
            console.log(`  ‚ùå ${machine.name}: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (${error.message})`);
        }
        
        console.log('');
    }
    
    // –°–≤–æ–¥–∫–∞
    console.log('üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:');
    console.log(`   –í—Å–µ–≥–æ –º–∞—à–∏–Ω: ${machines.length}`);
    console.log(`   –û—Ç–≤–µ—á–∞—é—Ç: ${results.length}`);
    console.log(`   –ù–µ –æ—Ç–≤–µ—á–∞—é—Ç: ${machines.length - results.length}`);
    
    if (results.length > 0) {
        const totalParts = results.reduce((sum, r) => sum + r.partCount, 0);
        console.log(`   –û–±—â–∏–π –æ–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: ${totalParts.toLocaleString()} –¥–µ—Ç–∞–ª–µ–π`);
    }
    
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
    return results;
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª
 */
function saveResults(results) {
    const fs = require('fs');
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const filename = `fanuc_test_${timestamp}.json`;
    
    const report = {
        timestamp: new Date().toISOString(),
        totalMachines: machines.length,
        respondingMachines: results.length,
        results: results
    };
    
    fs.writeFileSync(filename, JSON.stringify(report, null, 2));
    console.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${filename}`);
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
    testAllMachines()
        .then(results => {
            if (results.length > 0) {
                saveResults(results);
            }
        })
        .catch(error => {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        });
} 