# –¢–µ—Å—Ç –≤—Å–µ—Ö —Å—Ö–µ–º MongoDB –¥–ª—è MTConnect Cloud API
$baseUrl = "http://localhost:3001"
$headers = @{"Content-Type" = "application/json"}

Write-Host "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º MongoDB MTConnect Cloud API..." -ForegroundColor Green

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function Send-Request {
    param(
        [string]$Method,
        [string]$Url,
        [hashtable]$Headers,
        [string]$Body = $null
    )
    
    try {
        if ($Body) {
            $response = Invoke-RestMethod -Uri $Url -Method $Method -Headers $Headers -Body $Body -ErrorAction Stop
        } else {
            $response = Invoke-RestMethod -Uri $Url -Method $Method -Headers $Headers -ErrorAction Stop
        }
        return @{Success = $true; Data = $response}
    } catch {
        return @{Success = $false; Error = $_.Exception.Message}
    }
}

# –¢–µ—Å—Ç 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–∞—à–∏–Ω—ã
Write-Host "`n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Machine Configuration Schema..." -ForegroundColor Yellow
$configData = Get-Content -Path "test-machine-config.json" -Raw
$url = "$baseUrl/api/test/machine-config"
$result = Send-Request -Method "POST" -Url $url -Headers $headers -Body $configData

if ($result.Success) {
    Write-Host "‚úÖ Machine Configuration —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞" -ForegroundColor Green
} else {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ Machine Configuration: $($result.Error)" -ForegroundColor Red
}

# –¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—à–∏–Ω—ã
Write-Host "`n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Machine State Schema..." -ForegroundColor Yellow
$stateData = Get-Content -Path "test-machine-state.json" -Raw
$url = "$baseUrl/api/test/machine-state"
$result = Send-Request -Method "POST" -Url $url -Headers $headers -Body $stateData

if ($result.Success) {
    Write-Host "‚úÖ Machine State —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ" -ForegroundColor Green
} else {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ Machine State: $($result.Error)" -ForegroundColor Red
}

# –¢–µ—Å—Ç 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–∞—à–∏–Ω—ã (TimeSeries)
Write-Host "`n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Machine Data Schema (TimeSeries)..." -ForegroundColor Yellow
$dataData = Get-Content -Path "test-machine-data.json" -Raw
$url = "$baseUrl/api/test/machine-data"
$result = Send-Request -Method "POST" -Url $url -Headers $headers -Body $dataData

if ($result.Success) {
    Write-Host "‚úÖ Machine Data (TimeSeries) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã" -ForegroundColor Green
} else {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ Machine Data: $($result.Error)" -ForegroundColor Red
}

# –¢–µ—Å—Ç 4: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
Write-Host "`n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Aggregated Data Schema..." -ForegroundColor Yellow
$aggregatedData = Get-Content -Path "test-aggregated-data.json" -Raw
$url = "$baseUrl/api/test/aggregated-data"
$result = Send-Request -Method "POST" -Url $url -Headers $headers -Body $aggregatedData

if ($result.Success) {
    Write-Host "‚úÖ Aggregated Data —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã" -ForegroundColor Green
} else {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ Aggregated Data: $($result.Error)" -ForegroundColor Red
}

# –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π
Write-Host "`n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π..." -ForegroundColor Yellow

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
$url = "$baseUrl/api/test/machine-config/SR-22"
$result = Send-Request -Method "GET" -Url $url -Headers $headers

if ($result.Success) {
    Write-Host "‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞—à–∏–Ω—ã: $($result.Data.machineName)" -ForegroundColor Green
} else {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: $($result.Error)" -ForegroundColor Red
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
$url = "$baseUrl/api/test/machine-state/SR-22"
$result = Send-Request -Method "GET" -Url $url -Headers $headers

if ($result.Success) {
    Write-Host "‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã: $($result.Data.executionStatus)" -ForegroundColor Green
} else {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: $($result.Error)" -ForegroundColor Red
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
$url = "$baseUrl/api/test/machine-data/SR-22"
$result = Send-Request -Method "GET" -Url $url -Headers $headers

if ($result.Success) {
    Write-Host "‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã: $($result.Data.Count) –∑–∞–ø–∏—Å–µ–π" -ForegroundColor Green
} else {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: $($result.Error)" -ForegroundColor Red
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
$url = "$baseUrl/api/test/aggregated-data/SR-22"
$result = Send-Request -Method "GET" -Url $url -Headers $headers

if ($result.Success) {
    Write-Host "‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: $($result.Data.Count) –∑–∞–ø–∏—Å–µ–π" -ForegroundColor Green
} else {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: $($result.Error)" -ForegroundColor Red
}

Write-Host "`nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!" -ForegroundColor Green 