# Task ID: 2
# Title: Create Modbus TCP Client for ADAM-6050 Connection
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Develop a Modbus TCP client using the jsmodbus library to connect to an ADAM-6050 device, implementing digital I/O reading and Keep-Alive functionality.
# Details:
1. Install the jsmodbus library:
   ```
   npm install jsmodbus
   ```

2. Create a new file `src/AdamClient.ts` and implement the AdamClient class:
   ```typescript
   import * as ModbusRTU from 'jsmodbus'
   import { Socket } from 'net'

   class AdamClient {
     private client: ModbusRTU.ModbusTCPClient
     private socket: Socket
     private keepAliveInterval: NodeJS.Timeout | null = null

     constructor(private ip: string, private port: number) {
       this.socket = new Socket()
       this.client = new ModbusRTU.client.TCP(this.socket, 1)
     }

     async connect(): Promise<void> {
       return new Promise((resolve, reject) => {
         this.socket.connect({ host: this.ip, port: this.port }, () => {
           console.log('Connected to ADAM-6050')
           this.setupKeepAlive()
           resolve()
         })
         this.socket.on('error', (err) => {
           console.error('Connection error:', err)
           reject(err)
         })
       })
     }

     async readDigitalInputs(): Promise<boolean[]> {
       const response = await this.client.readCoils(0, 16)
       return response.response.coils
     }

     async readDigitalOutputs(): Promise<boolean[]> {
       const response = await this.client.readCoils(16, 16)
       return response.response.coils
     }

     private setupKeepAlive(interval: number = 100): void {
       this.keepAliveInterval = setInterval(async () => {
         try {
           await this.readDigitalInputs()
         } catch (error) {
           console.error('Keep-Alive failed:', error)
           this.reconnect()
         }
       }, interval)
     }

     private async reconnect(): Promise<void> {
       console.log('Attempting to reconnect...')
       this.socket.destroy()
       await this.connect()
     }

     disconnect(): void {
       if (this.keepAliveInterval) {
         clearInterval(this.keepAliveInterval)
       }
       this.socket.end()
     }
   }

   export default AdamClient
   ```

3. Create a simple test script in `src/index.ts`:
   ```typescript
   import AdamClient from './AdamClient'

   async function main() {
     const client = new AdamClient('192.168.1.100', 502)
     
     try {
       await client.connect()
       
       setInterval(async () => {
         const inputs = await client.readDigitalInputs()
         const outputs = await client.readDigitalOutputs()
         console.log('Digital Inputs:', inputs)
         console.log('Digital Outputs:', outputs)
       }, 1000)
     } catch (error) {
       console.error('Error:', error)
     }
   }

   main()
   ```

4. Update `package.json` to include start and build scripts:
   ```json
   {
     "scripts": {
       "start": "node dist/index.js",
       "build": "tsc",
       "dev": "ts-node src/index.ts"
     }
   }
   ```

5. Ensure proper error handling and logging throughout the implementation.

6. Implement reconnection logic in case of connection loss.

7. Consider implementing a method for writing to digital outputs if required in the future.

# Test Strategy:
1. Unit Testing:
   - Create unit tests for the AdamClient class methods using a testing framework like Jest.
   - Mock the ModbusTCPClient to test readDigitalInputs and readDigitalOutputs methods.
   - Test error handling and reconnection logic.

2. Integration Testing:
   - Set up a test environment with a real or simulated ADAM-6050 device.
   - Test the connection process and verify successful communication.
   - Verify reading of digital inputs and outputs with known states.
   - Test the Keep-Alive functionality by running the client for an extended period.
   - Simulate network interruptions to test the reconnection logic.

3. Performance Testing:
   - Measure the response time for reading inputs and outputs.
   - Verify that the 100ms polling interval is maintained consistently.
   - Test the system under high load conditions to ensure stability.

4. Error Handling:
   - Test various error scenarios such as wrong IP, port, or device offline.
   - Verify that appropriate error messages are logged.

5. Long-running Test:
   - Run the client for an extended period (e.g., 24 hours) to ensure stability and memory management.

6. Code Review:
   - Conduct a thorough code review to ensure best practices are followed.
   - Check for proper TypeScript typing and code documentation.

7. Manual Testing:
   - Use the test script to manually verify the functionality.
   - Monitor the console output to ensure correct data is being read and displayed.
