# Task ID: 1
# Title: Set up project structure and configuration for adam-poc
# Status: pending
# Dependencies: None
# Priority: high
# Description: Create the initial repository structure for the adam-poc project, including Dockerfile, TypeScript configuration, and essential directories. Set up package.json with required dependencies.
# Details:
1. Create a new Git repository named 'adam-poc'
2. Set up the following directory structure:
   ```
   adam-poc/
   ├── src/
   ├── tests/
   ├── docker/
   ├── Dockerfile
   ├── package.json
   ├── tsconfig.json
   └── .gitignore
   ```
3. Create a Dockerfile in the root directory with the following content:
   ```dockerfile
   FROM node:18-alpine
   WORKDIR /app
   COPY package*.json ./
   RUN npm install
   COPY . .
   RUN npm run build
   CMD ["npm", "start"]
   ```
4. Create a package.json file with the following content:
   ```json
   {
     "name": "adam-poc",
     "version": "1.0.0",
     "description": "Adam POC project",
     "main": "dist/index.js",
     "scripts": {
       "build": "tsc",
       "start": "node dist/index.js",
       "test": "jest"
     },
     "dependencies": {
       "jsmodbus": "^4.0.6",
       "axios": "^0.27.2",
       "rxjs": "^7.5.5"
     },
     "devDependencies": {
       "typescript": "^4.7.4",
       "@types/node": "^18.0.0",
       "jest": "^28.1.1",
       "@types/jest": "^28.1.3"
     }
   }
   ```
5. Set up tsconfig.json with the following configuration:
   ```json
   {
     "compilerOptions": {
       "target": "es2018",
       "module": "commonjs",
       "outDir": "./dist",
       "rootDir": "./src",
       "strict": true,
       "esModuleInterop": true,
       "skipLibCheck": true,
       "forceConsistentCasingInFileNames": true
     },
     "include": ["src/**/*"],
     "exclude": ["node_modules", "**/*.spec.ts"]
   }
   ```
6. Create a .gitignore file to exclude unnecessary files:
   ```
   node_modules/
   dist/
   .env
   *.log
   ```
7. Initialize the Git repository and make the initial commit.

# Test Strategy:
1. Verify the correct directory structure:
   - Check that src/, tests/, and docker/ directories exist
   - Confirm presence of Dockerfile, package.json, tsconfig.json, and .gitignore in the root directory

2. Validate Dockerfile:
   - Ensure it uses Node.js 18 Alpine as the base image
   - Verify correct WORKDIR, COPY, RUN, and CMD instructions

3. Test package.json:
   - Run `npm install` and verify all dependencies (jsmodbus, axios, rxjs) are installed correctly
   - Check that devDependencies include TypeScript and Jest

4. Verify tsconfig.json:
   - Ensure correct compiler options (target, module, outDir, rootDir, etc.)
   - Validate include and exclude patterns

5. Test TypeScript compilation:
   - Create a sample TypeScript file in src/
   - Run `npm run build` and verify successful compilation to dist/

6. Verify Git repository:
   - Run `git status` to ensure the repository is initialized
   - Check that node_modules/ and dist/ are ignored by Git

7. Test Docker build:
   - Run `docker build -t adam-poc .`
   - Verify successful build without errors
