# MTConnect System Refactoring PRD

## Цель проекта
Рефакторинг существующей MTConnect системы из двух независимых проектов (локальный Express сборщик + облачный NestJS API) в единую monorepo архитектуру с MQTT message bus.

## Текущие проблемы
1. **Два параллельных Dashboard**: локальный (порт 5000) и облачный (порт 3001) с разными источниками данных
2. **Разные контракты данных**: Express отправляет минимальный JSON, NestJS ожидает богатый вложенный формат
3. **Нет единого процесса разработки**: DEV ≠ PROD окружения
4. **Захламлённый репозиторий**: тестовые файлы, бинарники, дубликаты кода
5. **Процессы node.js висят**: нет процесс-менеджера, порты заняты

## Целевая архитектура
- **Edge Gateway** (NestJS): сбор данных с MTConnect + Adam-6050, публикация в MQTT
- **Message Bus** (MQTT/Mosquitto): буферизация и доставка сообщений
- **Cloud Consumer** (NestJS): подписка на MQTT, валидация, запись в MongoDB
- **Cloud API** (NestJS): REST/GraphQL endpoints, MTConnect XML export
- **Dashboard** (SPA): единый фронтенд, читает только Cloud API
- **Common DTO**: общий пакет с TypeScript моделями и валидацией

## Технический стек
- **Monorepo**: pnpm workspaces или Nx
- **Backend**: NestJS microservices
- **Message Bus**: Eclipse Mosquitto (MQTT v5)
- **Database**: MongoDB (уже запущен в Docker)
- **Frontend**: React/Vue SPA
- **DevOps**: Docker Compose, GitHub Actions
- **Observability**: Prometheus + Grafana

## Этапы выполнения

### Этап 1: Подготовка (День 1)
- Аудит и чистка кодовой базы
- Создание monorepo структуры
- Миграция существующих проектов
- Docker Compose для разработки

### Этап 2: Общие компоненты (День 2-3)
- Создание packages/common-dto
- Настройка MQTT брокера
- Базовые Dockerfile для сервисов

### Этап 3: Edge Gateway рефакторинг (День 4-5)
- Переписать Express на NestJS microservice
- Интеграция с MQTT publisher
- Миграция логики сбора данных

### Этап 4: Cloud Consumer (День 6-7)
- Создание MQTT subscriber сервиса
- Валидация и обработка сообщений
- Запись в MongoDB

### Этап 5: Cloud API обновление (День 8-9)
- Удаление ingestion логики
- Оптимизация read-only endpoints
- MTConnect XML exporter как отдельный сервис

### Этап 6: Dashboard унификация (День 10-11)
- Единый SPA фронтенд
- WebSocket для real-time данных
- Удаление дублирующих dashboard

### Этап 7: DevOps и мониторинг (День 12-13)
- CI/CD pipeline
- Prometheus метрики
- Grafana дашборды
- Health checks

### Этап 8: Финализация (День 14)
- Документация
- Канареечное тестирование
- Удаление legacy кода

## Критерии успеха
1. **Единый источник истины**: все данные идут через MQTT → MongoDB
2. **Воспроизводимое окружение**: `npm run start:dev` запускает полный стек
3. **Чистый репозиторий**: только необходимый код, без дубликатов
4. **Масштабируемость**: легко добавить новые Edge станции
5. **Observability**: метрики, логи, health checks

## Технические требования
- Node.js 18+ 
- Docker и Docker Compose
- MongoDB (уже настроен)
- Windows PowerShell совместимость
- Backward compatibility во время миграции

## Риски и митигация
- **Потеря данных**: канареечный период с дублированием
- **Downtime**: поэтапная миграция без остановки production
- **Сложность**: начинаем с простых компонентов, постепенно усложняем 