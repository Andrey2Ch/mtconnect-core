"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FocasRealClient = void 0;
const net = __importStar(require("net"));
const ffi = __importStar(require("ffi-napi"));
const ref = __importStar(require("ref-napi"));
const path = __importStar(require("path"));
// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö FOCAS
const ODBST = ref.types.void; // –ë—É–¥–µ–º –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –ø–æ–∑–∂–µ
const ODBACT = ref.types.void;
const ODBSPN = ref.types.void;
class FocasRealClient {
    constructor(ip) {
        this.focasLib = null;
        this.handle = 0;
        this.port = 8193;
        this.isConnected = false;
        this.ip = ip;
        this.loadFocasLibrary();
    }
    loadFocasLibrary() {
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å FOCAS –±–∏–±–ª–∏–æ—Ç–µ–∫—É
            const possiblePaths = [
                'fwlib32.dll',
                path.join('C:', 'Windows', 'System32', 'fwlib32.dll'),
                path.join('C:', 'Program Files', 'FANUC', 'fwlib32.dll'),
                path.join('C:', 'Program Files (x86)', 'FANUC', 'fwlib32.dll'),
                './fwlib32.dll'
            ];
            for (const libPath of possiblePaths) {
                try {
                    console.log(`üîç –ü—ã—Ç–∞—é—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å FOCAS –∏–∑: ${libPath}`);
                    this.focasLib = ffi.Library(libPath, {
                        // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                        'cnc_allclibhndl3': ['short', ['string', 'ushort', 'long', 'pointer']],
                        'cnc_freelibhndl': ['short', ['ushort']],
                        // –°—Ç–∞—Ç—É—Å —Å—Ç–∞–Ω–∫–∞
                        'cnc_statinfo': ['short', ['ushort', 'pointer']],
                        'cnc_rdexecprog': ['short', ['ushort', 'pointer', 'pointer']],
                        'cnc_rdalmmsg': ['short', ['ushort', 'short', 'pointer', 'pointer']],
                        // –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
                        'cnc_rdtimer': ['short', ['ushort', 'short', 'pointer']],
                        'cnc_rdacttime': ['short', ['ushort', 'pointer']],
                        'cnc_rdoptime': ['short', ['ushort', 'pointer']],
                        // –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ  
                        'cnc_rdspindle': ['short', ['ushort', 'short', 'pointer']],
                        'cnc_rdfeedrate': ['short', ['ushort', 'pointer']],
                        'cnc_rdaxisdata': ['short', ['ushort', 'short', 'pointer', 'short', 'pointer']],
                        'cnc_rdprgnum': ['short', ['ushort', 'pointer']],
                        'cnc_rdseqnum': ['short', ['ushort', 'pointer']],
                        'cnc_rdtlnum': ['short', ['ushort', 'pointer']]
                    });
                    console.log(`‚úÖ FOCAS –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${libPath}`);
                    return;
                }
                catch (err) {
                    // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—É—Ç—å
                    continue;
                }
            }
            throw new Error('FOCAS –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ FOCAS:', error);
            this.focasLib = null;
        }
    }
    async connect() {
        if (!this.focasLib) {
            console.log('‚ö†Ô∏è FOCAS –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—é —ç–º—É–ª—è—Ü–∏—é...');
            return this.connectEmulation();
        }
        try {
            console.log(`üîå –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ FANUC ${this.ip} —á–µ—Ä–µ–∑ FOCAS...`);
            // –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è handle
            const handlePtr = ref.alloc('ushort');
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —á–µ—Ä–µ–∑ Ethernet
            const result = this.focasLib.cnc_allclibhndl3(this.ip, // IP –∞–¥—Ä–µ—Å
            this.port, // –ü–æ—Ä—Ç
            10, // Timeout  
            handlePtr // –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ handle
            );
            if (result === 0) { // EW_OK
                this.handle = handlePtr.deref();
                this.isConnected = true;
                console.log(`‚úÖ FOCAS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${this.ip} —É—Å–ø–µ—à–Ω–æ (handle: ${this.handle})`);
                return true;
            }
            else {
                console.log(`‚ùå FOCAS –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${this.ip}: –∫–æ–¥ ${result}`);
                return this.connectEmulation();
            }
        }
        catch (error) {
            console.error(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ FOCAS –¥–ª—è ${this.ip}:`, error);
            return this.connectEmulation();
        }
    }
    async connectEmulation() {
        // –≠–º—É–ª—è—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π TCP
        return new Promise((resolve) => {
            const socket = new net.Socket();
            socket.on('connect', () => {
                socket.end();
                this.isConnected = true;
                console.log(`‚úÖ ${this.ip}: —ç–º—É–ª—è—Ü–∏—è FOCAS (TCP –ø—Ä–æ–≤–µ—Ä–∫–∞)`);
                resolve(true);
            });
            socket.on('error', () => {
                console.log(`‚ùå ${this.ip}: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
                resolve(false);
            });
            socket.connect(this.port, this.ip);
        });
    }
    async getRealTimeData() {
        if (!this.isConnected) {
            return null;
        }
        try {
            if (this.focasLib && this.handle > 0) {
                return await this.getFocasData();
            }
            else {
                return this.getEmulatedData();
            }
        }
        catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ${this.ip}:`, error);
            return null;
        }
    }
    async getFocasData() {
        console.log(`üì° –ü–æ–ª—É—á–∞—é –†–ï–ê–õ–¨–ù–´–ï FOCAS –¥–∞–Ω–Ω—ã–µ –æ—Ç ${this.ip}...`);
        // –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        const statusBuf = ref.alloc('int32');
        const spindleBuf = ref.alloc('int32', 4); // 4 —ç–ª–µ–º–µ–Ω—Ç–∞
        const positionBuf = ref.alloc('double', 8); // X,Y,Z + –∑–∞–ø–∞—Å
        const programBuf = ref.alloc('int32');
        const data = {
            machineId: this.ip,
            timestamp: new Date().toISOString(),
            isOnline: true,
            status: {
                run: false,
                alarm: false,
                emergency: false,
                mode: 0,
                execution: 'UNKNOWN'
            },
            cycleTime: {
                current: 0,
                average: 0,
                total: 0
            },
            production: {
                spindle: 0,
                feedrate: 0,
                programNumber: 0,
                sequenceNumber: 0,
                toolNumber: 0
            },
            position: {
                x: 0,
                y: 0,
                z: 0
            }
        };
        try {
            // –ß–∏—Ç–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç–∞–Ω–∫–∞
            const statusResult = this.focasLib.cnc_statinfo(this.handle, statusBuf);
            if (statusResult === 0) {
                const status = statusBuf.deref();
                data.status.run = (status & 0x01) !== 0; // –ë–∏—Ç —Ä–∞–±–æ—Ç—ã
                data.status.alarm = (status & 0x02) !== 0; // –ë–∏—Ç –∞–≤–∞—Ä–∏–∏
                data.status.emergency = (status & 0x04) !== 0; // –ê–≤–∞—Ä–∏–π–Ω—ã–π —Å—Ç–æ–ø
                data.status.execution = data.status.run ? 'ACTIVE' : 'STOPPED';
                console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${data.status.execution}, –ê–≤–∞—Ä–∏–∏: ${data.status.alarm}`);
            }
            // –ß–∏—Ç–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —à–ø–∏–Ω–¥–µ–ª—è
            const spindleResult = this.focasLib.cnc_rdspindle(this.handle, 0, spindleBuf);
            if (spindleResult === 0) {
                data.production.spindle = spindleBuf.deref();
                console.log(`   üîÑ –®–ø–∏–Ω–¥–µ–ª—å: ${data.production.spindle} RPM`);
            }
            // –ß–∏—Ç–∞–µ–º –Ω–æ–º–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã
            const progResult = this.focasLib.cnc_rdprgnum(this.handle, programBuf);
            if (progResult === 0) {
                data.production.programNumber = programBuf.deref();
                console.log(`   üìã –ü—Ä–æ–≥—Ä–∞–º–º–∞: ${data.production.programNumber}`);
            }
            // –ß–∏—Ç–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –æ—Å–µ–π
            const posResult = this.focasLib.cnc_rdaxisdata(this.handle, 1, positionBuf, 3, ref.alloc('short', 3));
            if (posResult === 0) {
                // –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 double –∫–∞–∫ X,Y,Z
                data.position.x = ref.get(positionBuf, 0, 'double');
                data.position.y = ref.get(positionBuf, 8, 'double');
                data.position.z = ref.get(positionBuf, 16, 'double');
                console.log(`   üìç –ü–æ–∑–∏—Ü–∏—è: X=${data.position.x}, Y=${data.position.y}, Z=${data.position.z}`);
            }
        }
        catch (error) {
            console.error(`‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ FOCAS –¥–ª—è ${this.ip}:`, error);
        }
        return data;
    }
    getEmulatedData() {
        // –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
        const now = new Date();
        const hour = now.getHours();
        const isWorkingHours = hour >= 7 && hour <= 19;
        const isWorking = isWorkingHours ? Math.random() < 0.7 : Math.random() < 0.1;
        return {
            machineId: this.ip,
            timestamp: now.toISOString(),
            isOnline: true,
            status: {
                run: isWorking,
                alarm: Math.random() < 0.05,
                emergency: false,
                mode: isWorking ? 1 : 0,
                execution: isWorking ? 'ACTIVE' : 'STOPPED'
            },
            cycleTime: {
                current: isWorking ? Math.round(120 + Math.random() * 180) : 0, // 2-5 –º–∏–Ω
                average: 180,
                total: Math.round(Math.random() * 28800) // –î–æ 8 —á–∞—Å–æ–≤
            },
            production: {
                spindle: isWorking ? Math.round(500 + Math.random() * 3000) : 0,
                feedrate: isWorking ? Math.round(100 + Math.random() * 1000) : 0,
                programNumber: isWorking ? Math.floor(Math.random() * 999) + 1 : 0,
                sequenceNumber: isWorking ? Math.floor(Math.random() * 500) + 1 : 0,
                toolNumber: isWorking ? Math.floor(Math.random() * 20) + 1 : 0
            },
            position: {
                x: Math.round((Math.random() - 0.5) * 1000 * 100) / 100,
                y: Math.round((Math.random() - 0.5) * 1000 * 100) / 100,
                z: Math.round(Math.random() * 500 * 100) / 100
            }
        };
    }
    async disconnect() {
        if (this.focasLib && this.handle > 0) {
            try {
                this.focasLib.cnc_freelibhndl(this.handle);
                console.log(`üîå FOCAS –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç ${this.ip}`);
            }
            catch (error) {
                console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è FOCAS ${this.ip}:`, error);
            }
        }
        this.isConnected = false;
        this.handle = 0;
    }
}
exports.FocasRealClient = FocasRealClient;
