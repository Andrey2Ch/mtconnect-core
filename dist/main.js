"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const cors_1 = __importDefault(require("cors"));
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
// –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –∫–ª–∞—Å—Å–æ–≤
const adam_reader_1 = require("./adam-reader");
const shdr_client_1 = require("./shdr-client");
// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
const configPath = path.join(__dirname, 'config.json');
console.log(`üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: config.json`);
if (!fs.existsSync(configPath)) {
    throw new Error(`‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${configPath}`);
}
const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
const app = (0, express_1.default)();
const port = parseInt(process.env.PORT || '3000', 10);
// Middleware
app.use((0, cors_1.default)());
app.use(express_1.default.json());
// –ú–∞—à–∏–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const FANUC_MACHINES = config.machines;
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SHDR Manager
const shdrManager = new shdr_client_1.SHDRManager();
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AdamReader
const adamReader = new adam_reader_1.AdamReader();
// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SHDR –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
FANUC_MACHINES.forEach(machine => {
    const shdrConfig = {
        ip: machine.ip,
        port: machine.port,
        machineId: machine.id,
        machineName: machine.name,
        reconnectInterval: 5000,
        timeout: 10000
    };
    console.log(`üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SHDR –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è ${machine.name} (${machine.ip}:${machine.port})`);
    shdrManager.addMachine(shdrConfig);
});
// –°–æ–±—ã—Ç–∏—è SHDR Manager
shdrManager.on('machineConnected', (machineId) => {
    console.log(`üéâ SHDR –º–∞—à–∏–Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞: ${machineId}`);
});
shdrManager.on('machineDisconnected', (machineId) => {
    console.log(`üòû SHDR –º–∞—à–∏–Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞: ${machineId}`);
});
shdrManager.on('dataReceived', (machineId, dataItem) => {
    console.log(`üìä SHDR –¥–∞–Ω–Ω—ã–µ –æ—Ç ${machineId}: ${dataItem.dataItem} = ${dataItem.value}`);
});
// API endpoints
app.get('/', (req, res) => {
    res.send(`
        <h1>üè≠ MTConnect Modernized System</h1>
        <h2>Direct SHDR + ADAM Integration</h2> 
        <div style="background: #f0f8ff; padding: 15px; margin: 10px 0; border-radius: 5px;">
            <h3>üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</h3>
            <p><strong>FANUC —Å—Ç–∞–Ω–∫–æ–≤:</strong> ${FANUC_MACHINES.length}</p>
            <p><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</strong> –ü—Ä—è–º—ã–µ SHDR –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ë–ï–ó MTConnect –∞–≥–µ–Ω—Ç–æ–≤)</p>
        </div>
        <ul>
            <li><a href="/api/machines">üìã –°–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω</a></li>
            <li><a href="/api/adam/counters">üî¢ ADAM —Å—á–µ—Ç—á–∏–∫–∏</a></li>
            <li><a href="/health">üíö Health Check</a></li>
        </ul>
        <p><em>–ü–æ—Ä—Ç: ${port}</em></p>
    `);
});
// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–∞—à–∏–Ω
app.get('/api/machines', (req, res) => {
    const machinesList = FANUC_MACHINES.map(machine => ({
        id: machine.id,
        name: machine.name,
        ip: machine.ip,
        port: machine.port,
        type: machine.type,
        connectionStatus: 'active'
    }));
    res.json(machinesList);
});
// Health check
app.get('/health', async (req, res) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ ADAM-6050
        let adamStatus = 'OK';
        let adamCounters = 0;
        try {
            const counters = await adamReader.readCounters();
            adamCounters = counters.length;
        }
        catch (error) {
            adamStatus = 'ERROR';
        }
        res.json({
            status: 'OK',
            timestamp: new Date().toISOString(),
            uptime: process.uptime(),
            adam6050: {
                status: adamStatus,
                counters: adamCounters
            },
            machines: FANUC_MACHINES.length,
            shdrConnections: shdrManager.getAllConnectionStatuses()
        });
    }
    catch (error) {
        res.status(500).json({
            status: 'ERROR',
            timestamp: new Date().toISOString(),
            error: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
// API –¥–ª—è ADAM —Å—á–µ—Ç—á–∏–∫–æ–≤
app.get('/api/adam/counters', async (req, res) => {
    try {
        const counters = await adamReader.readCounters();
        res.json({
            success: true,
            timestamp: new Date().toISOString(),
            counters: counters
        });
    }
    catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});
// API –¥–ª—è SHDR –¥–∞–Ω–Ω—ã—Ö
app.get('/api/shdr/data', (req, res) => {
    const shdrData = {};
    FANUC_MACHINES.forEach(machine => {
        const data = shdrManager.convertToMTConnectFormat(machine.id);
        shdrData[machine.id] = {
            machineName: machine.name,
            connectionStatus: 'active',
            data: data || null
        };
    });
    res.json({
        timestamp: new Date().toISOString(),
        machines: shdrData
    });
});
// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
    app.listen(port, () => {
        console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
        console.log(`üí° –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${port}/dashboard-new.html –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞—à–±–æ—Ä–¥–∞`);
    });
}
// Graceful shutdown
async function gracefulShutdown() {
    console.log('\nüîå –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    console.log('üîÑ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ SHDR –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...');
    shdrManager.disconnectAll();
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
    process.exit(0);
}
process.on('SIGINT', gracefulShutdown);
process.on('SIGTERM', gracefulShutdown);
// Main function
async function main() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...');
    await startServer();
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞');
}
main().catch(console.error);
