"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FocasNative = void 0;
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
let focasAddon = null;
try {
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π addon
    focasAddon = require('../build/Release/focas_addon.node');
    console.log('‚úÖ –†–ï–ê–õ–¨–ù–´–ô FOCAS addon –∑–∞–≥—Ä—É–∂–µ–Ω!');
}
catch (error) {
    console.log('‚ö†Ô∏è FOCAS addon –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é:', error.message);
}
class FocasNative {
    constructor() {
        this.isLibraryLoaded = false;
        this.isRealFocas = false;
        // –ü—É—Ç—å –∫ DLL –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
        this.dllPath = path.join(process.cwd(), 'Fwlib32.dll');
        this.checkLibrary();
    }
    checkLibrary() {
        try {
            if (fs.existsSync(this.dllPath)) {
                console.log(`‚úÖ FOCAS DLL –Ω–∞–π–¥–µ–Ω–∞: ${this.dllPath}`);
                this.isLibraryLoaded = true;
                if (focasAddon) {
                    this.isRealFocas = true;
                    console.log('üî• –ò—Å–ø–æ–ª—å–∑—É–µ–º –†–ï–ê–õ–¨–ù–´–ô FOCAS —á–µ—Ä–µ–∑ C++ addon!');
                }
                else {
                    console.log('‚ö†Ô∏è DLL –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ addon –Ω–µ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é.');
                }
            }
            else {
                console.error(`‚ùå FOCAS DLL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${this.dllPath}`);
                this.isLibraryLoaded = false;
            }
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ FOCAS DLL:', error);
            this.isLibraryLoaded = false;
        }
    }
    isAvailable() {
        return this.isLibraryLoaded;
    }
    isReal() {
        return this.isRealFocas;
    }
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—Ç–∞–Ω–∫—É
    connect(ip, port = 8193, timeout = 10) {
        if (!this.isLibraryLoaded) {
            throw new Error('FOCAS –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        }
        if (this.isRealFocas) {
            // –†–ï–ê–õ–¨–ù–û–ï –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ addon
            try {
                const handle = focasAddon.connect(ip, port);
                if (handle > 0) {
                    console.log(`üî• –†–ï–ê–õ–¨–ù–û–ï FOCAS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${ip}:${port} —É—Å–ø–µ—à–Ω–æ! Handle: ${handle}`);
                    return handle;
                }
                else {
                    console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ${ip}:${port} —á–µ—Ä–µ–∑ –†–ï–ê–õ–¨–ù–´–ô FOCAS`);
                    return -1;
                }
            }
            catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –†–ï–ê–õ–¨–ù–û–ì–û FOCAS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${ip}:`, error);
                return -1;
            }
        }
        else {
            // –°–∏–º—É–ª—è—Ü–∏—è (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
            console.log(`üé≤ –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${ip}:${port}`);
            const fakeHandle = Math.floor(Math.random() * 1000) + 1;
            console.log(`‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–∞. Handle: ${fakeHandle}`);
            return fakeHandle;
        }
    }
    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å—Ç–∞–Ω–∫–∞
    disconnect(handle) {
        if (!this.isLibraryLoaded || handle <= 0) {
            return false;
        }
        if (this.isRealFocas) {
            // –†–ï–ê–õ–¨–ù–û–ï –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
            try {
                const result = focasAddon.disconnect(handle);
                if (result) {
                    console.log(`‚úÖ –†–ï–ê–õ–¨–ù–û–ï FOCAS –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ. Handle: ${handle}`);
                    return true;
                }
                else {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –†–ï–ê–õ–¨–ù–û–ì–û FOCAS –æ—Ç–∫–ª—é—á–µ–Ω–∏—è. Handle: ${handle}`);
                    return false;
                }
            }
            catch (error) {
                console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –†–ï–ê–õ–¨–ù–û–ú –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏:', error);
                return false;
            }
        }
        else {
            // –°–∏–º—É–ª—è—Ü–∏—è
            console.log(`‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è. Handle: ${handle}`);
            return true;
        }
    }
    // –ß—Ç–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç–∞–Ω–∫–∞
    readStatus(handle) {
        if (!this.isLibraryLoaded || handle <= 0) {
            return null;
        }
        if (this.isRealFocas) {
            // –†–ï–ê–õ–¨–ù–û–ï —á—Ç–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            try {
                const status = focasAddon.readStatus(handle);
                if (status) {
                    console.log(`üî• –†–ï–ê–õ–¨–ù–´–ô —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω –æ—Ç handle ${handle}:`, status);
                    return status;
                }
                else {
                    console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –†–ï–ê–õ–¨–ù–´–ô —Å—Ç–∞—Ç—É—Å –æ—Ç handle ${handle}`);
                    return null;
                }
            }
            catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –†–ï–ê–õ–¨–ù–û–ì–û —Å—Ç–∞—Ç—É—Å–∞:', error);
                return null;
            }
        }
        else {
            // –°–∏–º—É–ª—è—Ü–∏—è (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
            const hour = new Date().getHours();
            const isWorkingHours = hour >= 7 && hour <= 19;
            const isRunning = isWorkingHours && Math.random() < 0.8;
            return {
                mode: isRunning ? 1 : 0,
                running: isRunning ? 1 : 0,
                motion: isRunning ? (Math.random() < 0.7 ? 1 : 0) : 0,
                emergency: 0,
                alarm: Math.random() < 0.05 ? 1 : 0,
                edit: 0
            };
        }
    }
    // –ß—Ç–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –æ—Å–µ–π
    readPositions(handle) {
        if (!this.isLibraryLoaded || handle <= 0) {
            return null;
        }
        if (this.isRealFocas) {
            // –†–ï–ê–õ–¨–ù–û–ï —á—Ç–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
            try {
                const positions = focasAddon.readPositions(handle);
                if (positions) {
                    console.log(`üî• –†–ï–ê–õ–¨–ù–´–ï –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç handle ${handle}:`, positions);
                    return positions;
                }
                else {
                    console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –†–ï–ê–õ–¨–ù–´–ï –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç handle ${handle}`);
                    return null;
                }
            }
            catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –†–ï–ê–õ–¨–ù–´–• –ø–æ–∑–∏—Ü–∏–π:', error);
                return null;
            }
        }
        else {
            // –°–∏–º—É–ª—è—Ü–∏—è (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
            return {
                X: {
                    absolute: Math.round((Math.random() - 0.5) * 500 * 100) / 100,
                    machine: Math.round((Math.random() - 0.5) * 500 * 100) / 100,
                    relative: Math.round((Math.random() - 0.5) * 100 * 100) / 100,
                    remaining: Math.round(Math.random() * 50 * 100) / 100
                },
                Y: {
                    absolute: Math.round((Math.random() - 0.5) * 400 * 100) / 100,
                    machine: Math.round((Math.random() - 0.5) * 400 * 100) / 100,
                    relative: Math.round((Math.random() - 0.5) * 100 * 100) / 100,
                    remaining: Math.round(Math.random() * 50 * 100) / 100
                },
                Z: {
                    absolute: Math.round(Math.random() * 300 * 100) / 100,
                    machine: Math.round(Math.random() * 300 * 100) / 100,
                    relative: Math.round((Math.random() - 0.5) * 50 * 100) / 100,
                    remaining: Math.round(Math.random() * 25 * 100) / 100
                }
            };
        }
    }
    // –ß—Ç–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ —à–ø–∏–Ω–¥–µ–ª—è –∏ –ø–æ–¥–∞—á–∏
    readActualValues(handle) {
        if (!this.isLibraryLoaded || handle <= 0) {
            return null;
        }
        if (this.isRealFocas) {
            // –†–ï–ê–õ–¨–ù–û–ï —á—Ç–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–µ–π
            try {
                const actuals = focasAddon.readActuals(handle);
                if (actuals) {
                    console.log(`üî• –†–ï–ê–õ–¨–ù–´–ï —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç handle ${handle}:`, actuals);
                    return actuals;
                }
                else {
                    console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –†–ï–ê–õ–¨–ù–´–ï —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç handle ${handle}`);
                    return null;
                }
            }
            catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –†–ï–ê–õ–¨–ù–´–• —Å–∫–æ—Ä–æ—Å—Ç–µ–π:', error);
                return null;
            }
        }
        else {
            // –°–∏–º—É–ª—è—Ü–∏—è (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
            const hour = new Date().getHours();
            const isWorkingHours = hour >= 7 && hour <= 19;
            const isRunning = isWorkingHours && Math.random() < 0.8;
            return {
                spindleSpeed: isRunning ? Math.round(800 + Math.random() * 3200) : 0,
                feedRate: isRunning ? Math.round(100 + Math.random() * 1200) : 0
            };
        }
    }
    // –ß—Ç–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    readProgramNumber(handle) {
        if (!this.isLibraryLoaded || handle <= 0) {
            return 0;
        }
        if (this.isRealFocas) {
            // –†–ï–ê–õ–¨–ù–û–ï —á—Ç–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            try {
                const progNum = focasAddon.readProgramNumber(handle);
                console.log(`üî• –†–ï–ê–õ–¨–ù–´–ô –Ω–æ–º–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ–ª—É—á–µ–Ω –æ—Ç handle ${handle}: ${progNum}`);
                return progNum || 0;
            }
            catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –†–ï–ê–õ–¨–ù–û–ì–û –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã:', error);
                return 0;
            }
        }
        else {
            // –°–∏–º—É–ª—è—Ü–∏—è (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
            const hour = new Date().getHours();
            const isWorkingHours = hour >= 7 && hour <= 19;
            const isRunning = isWorkingHours && Math.random() < 0.8;
            return isRunning ? Math.floor(Math.random() * 999) + 1000 : 0;
        }
    }
    // –ß—Ç–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    readSequenceNumber(handle) {
        if (!this.isLibraryLoaded || handle <= 0) {
            return 0;
        }
        if (this.isRealFocas) {
            // –†–ï–ê–õ–¨–ù–û–ï —á—Ç–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            try {
                const seqNum = focasAddon.readSequenceNumber(handle);
                console.log(`üî• –†–ï–ê–õ–¨–ù–´–ô –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω –æ—Ç handle ${handle}: ${seqNum}`);
                return seqNum || 0;
            }
            catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –†–ï–ê–õ–¨–ù–û–ì–û –Ω–æ–º–µ—Ä–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
                return 0;
            }
        }
        else {
            // –°–∏–º—É–ª—è—Ü–∏—è (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
            const hour = new Date().getHours();
            const isWorkingHours = hour >= 7 && hour <= 19;
            const isRunning = isWorkingHours && Math.random() < 0.8;
            return isRunning ? Math.floor(Math.random() * 9999) + 1 : 0;
        }
    }
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    static checkAvailability() {
        try {
            const dllPath = path.join(process.cwd(), 'Fwlib32.dll');
            return fs.existsSync(dllPath);
        }
        catch {
            return false;
        }
    }
}
exports.FocasNative = FocasNative;
exports.default = FocasNative;
