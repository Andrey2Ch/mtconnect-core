"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FocasClient = void 0;
const path = __importStar(require("path"));
const fanuc_integration_1 = __importDefault(require("./fanuc-integration"));
class FocasClient {
    constructor() {
        this.host = '';
        this.port = 8193;
        this.isConnected = false;
        this.machineIds = ['DT-26', 'SR-10', 'SR-21', 'SR-23', 'SR-25', 'SR-26', 'XD-20', 'XD-38'];
        this.machineIPs = [
            '192.168.1.105',
            '192.168.1.91',
            '192.168.1.101',
            '192.168.1.103',
            '192.168.1.104',
            '192.168.1.54',
            '192.168.1.90',
            '192.168.1.199'
        ];
        this.fanucIntegration = new fanuc_integration_1.default();
        console.log(`üè≠ FOCAS Client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`);
        if (this.fanucIntegration.isReady()) {
            console.log(`‚úÖ FANUC –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ`);
        }
        else {
            console.log(`‚ö†Ô∏è FANUC –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ —Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª—è—Ü–∏–∏`);
        }
    }
    async connect() {
        if (this.isConnected) {
            return true;
        }
        try {
            console.log(`üîß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FANUC —Å—Ç–∞–Ω–∫–∞–º...`);
            let connectedCount = 0;
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫–æ –≤—Å–µ–º —Å—Ç–∞–Ω–∫–∞–º
            for (let i = 0; i < this.machineIds.length; i++) {
                const machineId = this.machineIds[i];
                const ip = this.machineIPs[i];
                const connected = await this.fanucIntegration.connectToMachine(machineId, ip, this.port);
                if (connected) {
                    connectedCount++;
                    console.log(`‚úÖ ${machineId} (${ip}) –ø–æ–¥–∫–ª—é—á–µ–Ω`);
                }
                else {
                    console.log(`‚ùå ${machineId} (${ip}) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
                }
            }
            this.isConnected = connectedCount > 0;
            if (this.isConnected) {
                console.log(`üî• FANUC –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${connectedCount}/${this.machineIds.length} —Å—Ç–∞–Ω–∫–æ–≤`);
                return true;
            }
            else {
                console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É FANUC —Å—Ç–∞–Ω–∫—É`);
                return false;
            }
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ FANUC:', error);
            this.isConnected = false;
            return false;
        }
    }
    async disconnect() {
        if (!this.isConnected) {
            return;
        }
        try {
            console.log(`üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç FANUC —Å—Ç–∞–Ω–∫–æ–≤...`);
            for (const machineId of this.machineIds) {
                await this.fanucIntegration.disconnectFromMachine(machineId);
            }
            this.isConnected = false;
            console.log(`‚úÖ FANUC –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç FANUC:', error);
            this.isConnected = false;
        }
    }
    async getAllMachineData() {
        const machineDataMap = new Map();
        if (!this.isConnected) {
            console.log('‚ö†Ô∏è FANUC –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
            return machineDataMap;
        }
        try {
            const connectedMachines = this.fanucIntegration.getConnectedMachines();
            for (const machineId of connectedMachines) {
                const data = await this.fanucIntegration.getMachineData(machineId);
                if (data) {
                    const mtconnectData = this.fanucIntegration.toMTConnectData(machineId);
                    if (mtconnectData) {
                        machineDataMap.set(machineId, mtconnectData);
                    }
                }
            }
            console.log(`üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç ${machineDataMap.size} FANUC —Å—Ç–∞–Ω–∫–æ–≤`);
            return machineDataMap;
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö FANUC:', error);
            return machineDataMap;
        }
    }
    async getMachineData(machineId) {
        if (!this.isConnected) {
            return null;
        }
        try {
            const data = await this.fanucIntegration.getMachineData(machineId);
            if (data) {
                return this.fanucIntegration.toMTConnectData(machineId);
            }
            return null;
        }
        catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ${machineId}:`, error);
            return null;
        }
    }
    getConnectionStatus() {
        return this.isConnected;
    }
    getStatistics() {
        return this.fanucIntegration.getStatistics();
    }
    getConnectedMachines() {
        return this.fanucIntegration.getConnectedMachines();
    }
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ FOCAS
    static checkAvailability() {
        const dllPath = path.join(process.cwd(), 'Fwlib32.dll');
        try {
            const fs = require('fs');
            return fs.existsSync(dllPath);
        }
        catch {
            return false;
        }
    }
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ä—Å–∏–∏
    getVersionInfo() {
        return {
            focasAvailable: this.fanucIntegration.isReady(),
            dllPath: path.join(process.cwd(), 'Fwlib32.dll'),
            machineCount: this.machineIds.length,
            connectedCount: this.fanucIntegration.getConnectedMachines().length
        };
    }
}
exports.FocasClient = FocasClient;
exports.default = FocasClient;
