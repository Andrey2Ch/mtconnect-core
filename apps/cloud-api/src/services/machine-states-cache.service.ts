import { Injectable, OnModuleInit, Logger } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { MachineState, MachineStateDocument } from '../schemas/machine-state.schema';

export interface MachineStateData {
  machineId: string;
  // –í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è
  idleTimeMinutes: number;
  lastActiveTime: string;
  // –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –¥–µ—Ç–∞–ª–µ–π
  basePartCount: number;      // –ë–∞–∑–æ–≤—ã–π —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–∏—Å—Ç–µ–º—ã
  productionPartCount: number; // –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ –¥–µ—Ç–∞–ª–µ–π (—Ç–µ–∫—É—â–∏–π - –±–∞–∑–æ–≤—ã–π)
  lastPartCount: number;      // –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
  timestamp: string;
}

@Injectable()
export class MachineStatesCacheService implements OnModuleInit {
  private readonly logger = new Logger('MachineStatesCacheService');
  
  constructor(
    @InjectModel(MachineState.name) private machineStateModel: Model<MachineStateDocument>
  ) {}

  async onModuleInit() {
    this.logger.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –º–∞—à–∏–Ω...');
    
    // üíæ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å—Ç–æ—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await this.restoreMissedIdleTime();
    
    // üíæ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
    setInterval(async () => {
      // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    }, 30000);
    
    this.logger.log('‚úÖ –ö—ç—à —Å–æ—Å—Ç–æ—è–Ω–∏–π –º–∞—à–∏–Ω –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
  }

  /**
   * üïí –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è –¥–ª—è –≤—Å–µ—Ö –º–∞—à–∏–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
   */
  private async restoreMissedIdleTime() {
    try {
      const allStates = await this.machineStateModel.find().exec();
      
      for (const state of allStates) {
        const missedIdleTime = this.calculateMissedIdleTime(state.lastActiveTime);
        if (missedIdleTime > 0) {
          const newIdleTime = (state.idleTimeMinutes || 0) + missedIdleTime;
          
          await this.machineStateModel.findByIdAndUpdate(state._id, {
            idleTimeMinutes: newIdleTime,
            timestamp: new Date().toISOString()
          }).exec();
          
          this.logger.log(`üíæ ${state.machineId}: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${missedIdleTime} –º–∏–Ω –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å—Ç–æ—è (–∏—Ç–æ–≥–æ: ${newIdleTime} –º–∏–Ω)`);
        }
      }
      
      this.logger.log(`üíæ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–∞—à–∏–Ω –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å—Ç–æ—è: ${allStates.length}`);
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å—Ç–æ—è:', error);
    }
  }

  /**
   * üíæ –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—à–∏–Ω –∏–∑ MongoDB –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
   */
  async loadAllStates(): Promise<Map<string, MachineStateData>> {
    try {
      const states = await this.machineStateModel.find().exec();
      const statesMap = new Map<string, MachineStateData>();
      
      states.forEach(state => {
        statesMap.set(state.machineId, {
          machineId: state.machineId,
          idleTimeMinutes: state.idleTimeMinutes || 0,
          lastActiveTime: state.lastActiveTime || new Date().toISOString(),
          basePartCount: state.basePartCount || 0,
          productionPartCount: state.productionPartCount || 0,
          lastPartCount: state.lastPartCount || 0,
          timestamp: state.timestamp || new Date().toISOString()
        });
      });
      
      console.log(`üíæ Cloud API: –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π –º–∞—à–∏–Ω –∏–∑ MongoDB: ${statesMap.size}`);
      return statesMap;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –º–∞—à–∏–Ω –∏–∑ MongoDB:', error);
      return new Map();
    }
  }

  /**
   * üíæ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã –≤ MongoDB
   */
  async saveOrUpdateMachineState(machineId: string, data: Partial<MachineStateData>): Promise<void> {
    try {
      const now = new Date().toISOString();
      
      await this.machineStateModel.findOneAndUpdate(
        { machineId },
        {
          machineId,
          idleTimeMinutes: data.idleTimeMinutes ?? 0,
          lastActiveTime: data.lastActiveTime ?? now,
          basePartCount: data.basePartCount ?? 0,
          productionPartCount: data.productionPartCount ?? 0,
          lastPartCount: data.lastPartCount ?? 0,
          timestamp: now
        },
        { 
          upsert: true,  // –°–æ–∑–¥–∞–µ–º –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          new: true      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        }
      ).exec();
      
      console.log(`üíæ ${machineId}: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ MongoDB`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ${machineId}:`, error);
    }
  }

  /**
   * üïí –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  calculateMissedIdleTime(lastActiveTime: string): number {
    try {
      const lastActive = new Date(lastActiveTime);
      const now = new Date();
      const diffMs = now.getTime() - lastActive.getTime();
      const diffMinutes = Math.floor(diffMs / (1000 * 60));
      
      // –°—á–∏—Ç–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç
      return diffMinutes > 5 ? diffMinutes : 0;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å—Ç–æ—è –¥–ª—è ${lastActiveTime}:`, error);
      return 0;
    }
  }

  /**
   * üî¢ –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –¥–µ—Ç–∞–ª–µ–π
   */
  calculateProductionCount(
    currentPartCount: number, 
    basePartCount: number, 
    lastPartCount: number
  ): { productionCount: number; newBaseCount: number } {
    
    // –ï—Å–ª–∏ —Å—á–µ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∏–ª—Å—è (currentPartCount < lastPartCount)
    if (currentPartCount < lastPartCount) {
      console.log(`üîÑ –°—á–µ—Ç—á–∏–∫ —Å–±—Ä–æ—à–µ–Ω: –±—ã–ª–æ ${lastPartCount}, —Å—Ç–∞–ª–æ ${currentPartCount}`);
      // –ù–æ–≤–∞—è –±–∞–∑–æ–≤–∞—è —Ç–æ—á–∫–∞ = —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫
      return {
        productionCount: 0, // –ù–∞—á–∏–Ω–∞–µ–º —Å—á–∏—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        newBaseCount: currentPartCount
      };
    }
    
    // –û–±—ã—á–Ω—ã–π —Å–ª—É—á–∞–π: —Å—á–µ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–∏–ª—Å—è
    const productionCount = currentPartCount - basePartCount;
    return {
      productionCount: Math.max(0, productionCount), // –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
      newBaseCount: basePartCount // –ë–∞–∑–æ–≤–∞—è —Ç–æ—á–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è
    };
  }

  /**
   * üíæ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –º–∞—à–∏–Ω –º–∞—Å—Å–æ–≤–æ (–¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
   */
  async saveAllStates(states: Map<string, MachineStateData>): Promise<void> {
    try {
      const bulkOps = Array.from(states.values()).map(state => ({
        updateOne: {
          filter: { machineId: state.machineId },
          update: {
            machineId: state.machineId,
            idleTimeMinutes: state.idleTimeMinutes,
            lastActiveTime: state.lastActiveTime,
            basePartCount: state.basePartCount,
            productionPartCount: state.productionPartCount,
            lastPartCount: state.lastPartCount,
            timestamp: new Date().toISOString()
          },
          upsert: true
        }
      }));

      if (bulkOps.length > 0) {
        await this.machineStateModel.bulkWrite(bulkOps);
        console.log(`üíæ Cloud API: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π –º–∞—à–∏–Ω –≤ MongoDB: ${bulkOps.length}`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π:', error);
    }
  }

  /**
   * üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  async clearAllStates(): Promise<void> {
    try {
      await this.machineStateModel.deleteMany({}).exec();
      console.log('üíæ –í—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—à–∏–Ω –æ—á–∏—â–µ–Ω—ã –∏–∑ MongoDB');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π:', error);
    }
  }
}