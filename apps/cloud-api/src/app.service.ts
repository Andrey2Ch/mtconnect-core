import { Injectable, OnModuleInit, Logger } from '@nestjs/common';
import { MachineStatesCacheService } from './services/machine-states-cache.service';

@Injectable()
export class AppService implements OnModuleInit {
  private readonly logger = new Logger('AppService');
  private machineStatesCache = new Map<string, any>();

  constructor(private machineStatesCacheService: MachineStatesCacheService) {}

  async onModuleInit() {
    this.logger.log('üöÄ Cloud API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...');
    
    // üíæ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à —Å–æ—Å—Ç–æ—è–Ω–∏–π –º–∞—à–∏–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await this.loadMachineStatesCache();
    
    // üíæ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
    setInterval(async () => {
      await this.saveMachineStatesCache();
    }, 30000);
    
    this.logger.log('‚úÖ Cloud API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
  }

  private async loadMachineStatesCache() {
    try {
      this.machineStatesCache = await this.machineStatesCacheService.loadAllStates();
      
      // üíæ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
      this.machineStatesCache.forEach((state, machineId) => {
        // –†–∞—Å—á–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å—Ç–æ—è
        const missedIdleTime = this.machineStatesCacheService.calculateMissedIdleTime(state.lastActiveTime);
        if (missedIdleTime > 0) {
          state.idleTimeMinutes += missedIdleTime;
          this.logger.log(`üíæ ${machineId}: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${missedIdleTime} –º–∏–Ω –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å—Ç–æ—è`);
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (state.basePartCount === 0 && state.lastPartCount > 0) {
          state.basePartCount = state.lastPartCount;
          state.productionPartCount = 0;
          this.logger.log(`üî¢ ${machineId}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–∞–∑–æ–≤–∞—è —Ç–æ—á–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞: ${state.basePartCount}`);
        }
      });
      
      this.logger.log(`üíæ –ó–∞–≥—Ä—É–∂–µ–Ω –∫—ç—à —Å–æ—Å—Ç–æ—è–Ω–∏–π –º–∞—à–∏–Ω: ${this.machineStatesCache.size} –º–∞—à–∏–Ω`);
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –º–∞—à–∏–Ω:', error);
    }
  }

  private async saveMachineStatesCache() {
    try {
      if (this.machineStatesCache.size > 0) {
        await this.machineStatesCacheService.saveAllStates(this.machineStatesCache);
      }
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –º–∞—à–∏–Ω:', error);
    }
  }

  getHello(): string {
    return 'MTConnect Cloud API is running!';
  }

  /**
   * üíæ –ü–æ–ª—É—á–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã
   */
  getMachineState(machineId: string) {
    return this.machineStatesCache.get(machineId);
  }

  /**
   * üíæ –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã –≤ –∫—ç—à–µ
   */
  updateMachineState(machineId: string, updates: any) {
    const existing = this.machineStatesCache.get(machineId) || {
      machineId,
      idleTimeMinutes: 0,
      lastActiveTime: new Date().toISOString(),
      basePartCount: 0,
      productionPartCount: 0,
      lastPartCount: 0,
      timestamp: new Date().toISOString()
    };

    this.machineStatesCache.set(machineId, {
      ...existing,
      ...updates,
      timestamp: new Date().toISOString()
    });
  }

  /**
   * üî¢ –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –º–∞—à–∏–Ω—ã
   */
  getProductionPartCount(machineId: string, currentPartCount: number): number {
    const state = this.getMachineState(machineId);
    if (!state) {
      // –ù–æ–≤–∞—è –º–∞—à–∏–Ω–∞ - —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Ç–æ—á–∫—É
      this.updateMachineState(machineId, {
        basePartCount: currentPartCount,
        productionPartCount: 0,
        lastPartCount: currentPartCount
      });
      return 0;
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—á–µ—Ç—á–∏–∫
    const result = this.machineStatesCacheService.calculateProductionCount(
      currentPartCount,
      state.basePartCount,
      state.lastPartCount
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    this.updateMachineState(machineId, {
      basePartCount: result.newBaseCount,
      productionPartCount: result.productionCount,
      lastPartCount: currentPartCount
    });

    return result.productionCount;
  }
}