#!/usr/bin/env pwsh

# üöÄ –ü–†–ê–í–ò–õ–¨–ù–´–ô –°–ö–†–ò–ü–¢ –ó–ê–ü–£–°–ö–ê –°–ò–°–¢–ï–ú–´ MTConnect
# –ê–≤—Ç–æ—Ä: AgentDeskai

Write-Host "üöÄ –ó–∞–ø—É—Å–∫ MTConnect —Å–∏—Å—Ç–µ–º—ã..." -ForegroundColor Green
Write-Host ""

# –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ä—Ç—ã
Write-Host "üîç –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤..." -ForegroundColor Yellow
$ports = 3000,3001,7701,7702,7703,7704,7705,7706,7707,7708
foreach($port in $ports) {
    $conns = Get-NetTCPConnection -LocalPort $port -State Listen -ErrorAction SilentlyContinue
    if($conns) {
        Write-Host "‚ùå –£–±–∏–≤–∞—é –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É $port" -ForegroundColor Red
        foreach($conn in $conns) {
            Stop-Process -Id $conn.OwningProcess -Force -ErrorAction SilentlyContinue
        }
    }
}

# –ó–∞–ø—É—Å–∫ FANUC –∞–¥–∞–ø—Ç–µ—Ä–æ–≤
Write-Host ""
Write-Host "üîß –ó–∞–ø—É—Å–∫ FANUC –∞–¥–∞–ø—Ç–µ—Ä–æ–≤..." -ForegroundColor Yellow

$fanucPath = "From Anat/Fanuc"
if(!(Test-Path $fanucPath)) {
    Write-Host "‚ùå –ü–∞–ø–∫–∞ FANUC –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" -ForegroundColor Red
    exit 1
}

$machines = Get-ChildItem $fanucPath -Directory -Filter "M_*"
$count = 0

foreach($machine in $machines) {
    $adapterPath = Join-Path $machine.FullName "Adapter"
    $exe = $null
    
    if(Test-Path (Join-Path $adapterPath "fanuc_0id.exe")) {
        $exe = "fanuc_0id.exe"
    } elseif(Test-Path (Join-Path $adapterPath "fanuc_18i.exe")) {
        $exe = "fanuc_18i.exe"
    }
    
    if($exe) {
        Write-Host "  ‚úÖ –ó–∞–ø—É—Å–∫ $($machine.Name)" -ForegroundColor Green
        $title = "Adapter-$($machine.Name)"
        Start-Process cmd -ArgumentList "/k", "title $title && cd /d `"$adapterPath`" && $exe" -WindowStyle Minimized
        $count++
        Start-Sleep 1
    }
}

Write-Host "‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤: $count" -ForegroundColor Green

# –ü—Ä–æ–≤–µ—Ä–∫–∞ MongoDB
Write-Host ""
Write-Host "üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ MongoDB..." -ForegroundColor Yellow
try {
    $mongo = docker exec mtconnect-mongodb-simple mongosh mtconnect --eval 'db.machine_data.countDocuments()' --quiet
    Write-Host "‚úÖ MongoDB —Ä–∞–±–æ—Ç–∞–µ—Ç" -ForegroundColor Green
} catch {
    Write-Host "‚ùå MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Red
    Write-Host "üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker start mtconnect-mongodb-simple" -ForegroundColor Cyan
    exit 1
}

# –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
Write-Host ""
Write-Host "üì¶ –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..." -ForegroundColor Yellow
if(!(Test-Path "dist/main.js")) {
    npm run build
    if($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏" -ForegroundColor Red
        exit 1
    }
}

# –ó–∞–ø—É—Å–∫ Edge Gateway
Write-Host ""
Write-Host "üöÄ –ó–∞–ø—É—Å–∫ Edge Gateway..." -ForegroundColor Yellow
$env:PORT = '3000'
Start-Process powershell -ArgumentList "-NoExit", "-Command", "cd '$PWD'; node dist/main.js" -WindowStyle Minimized
Write-Host "‚úÖ Edge Gateway –Ω–∞ –ø–æ—Ä—Ç—É 3000" -ForegroundColor Green

# –ó–∞–ø—É—Å–∫ Cloud API
Write-Host ""
Write-Host "‚òÅÔ∏è –ó–∞–ø—É—Å–∫ Cloud API..." -ForegroundColor Yellow
Set-Location "apps/cloud-api"
$env:PORT = '3001'
$env:MONGODB_URI = 'mongodb://admin:password@localhost:27017/mtconnect?authSource=admin'

npm run build | Out-Null
if($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ API" -ForegroundColor Red
    Set-Location "../.."
    exit 1
}

Start-Process powershell -ArgumentList "-NoExit", "-Command", "cd '$PWD'; npm run start:dev" -WindowStyle Minimized
Set-Location "../.."
Write-Host "‚úÖ Cloud API –Ω–∞ –ø–æ—Ä—Ç—É 3001" -ForegroundColor Green

# –û–∂–∏–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞
Write-Host ""
Write-Host "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞..." -ForegroundColor Yellow
Start-Sleep 15

Write-Host ""
Write-Host "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã..." -ForegroundColor Yellow

try {
    Invoke-RestMethod "http://localhost:3000/health" -TimeoutSec 5 | Out-Null
    Write-Host "‚úÖ Edge Gateway —Ä–∞–±–æ—Ç–∞–µ—Ç" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Edge Gateway –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç" -ForegroundColor Red
}

try {
    $api = Invoke-RestMethod "http://localhost:3001/api/v2/dashboard/machines" -TimeoutSec 5
    Write-Host "‚úÖ Cloud API —Ä–∞–±–æ—Ç–∞–µ—Ç, –º–∞—à–∏–Ω: $($api.data.Count)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Cloud API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç" -ForegroundColor Red
}

# –†–µ–∑—É–ª—å—Ç–∞—Ç
Write-Host ""
Write-Host "üéâ –°–ò–°–¢–ï–ú–ê –ó–ê–ü–£–©–ï–ù–ê!" -ForegroundColor Green
Write-Host ""
Write-Host "üì± –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:" -ForegroundColor Cyan
Write-Host "   üåê Edge Gateway: http://localhost:3000" -ForegroundColor White
Write-Host "   ‚òÅÔ∏è Cloud API: http://localhost:3001" -ForegroundColor White
Write-Host '   DASHBOARD: http://localhost:3001/dashboard-v2.html' -ForegroundColor Yellow
Write-Host ""
Write-Host 'Press any key to exit...' -ForegroundColor White
$null = Read-Host