import express from 'express';
import cors from 'cors';
import * as path from 'path';
import * as fs from 'fs';

// –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –∫–ª–∞—Å—Å–æ–≤
import { AdamReader } from './adam-reader';
import { SHDRManager, SHDRConnectionConfig } from './shdr-client';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
const configPath = path.join(__dirname, 'config.json');
console.log(`üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: config.json`);

if (!fs.existsSync(configPath)) {
    throw new Error(`‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${configPath}`);
}

const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));

// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–∞—à–∏–Ω—ã  
interface MachineConfig {
    id: string;
    name: string;
    ip: string;
    port: number;
    type: string;
    uuid: string;
    adamChannel?: number;
    countingMethod?: string;
}

const app = express();
const port = parseInt(process.env.PORT || '3000', 10);

// Middleware
app.use(cors());
app.use(express.json());

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–¥–∞—à–±–æ—Ä–¥)
app.use(express.static(path.join(__dirname, '..', 'apps', 'cloud-api', 'public')));

// –ú–∞—à–∏–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const FANUC_MACHINES: MachineConfig[] = config.machines;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SHDR Manager
const shdrManager = new SHDRManager();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AdamReader
const adamReader = new AdamReader();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SHDR –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
FANUC_MACHINES.forEach(machine => {
    const shdrConfig: SHDRConnectionConfig = {
        ip: machine.ip,
        port: machine.port,
        machineId: machine.id,
        machineName: machine.name,
        reconnectInterval: 5000,
        timeout: 10000
    };
    
    console.log(`üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SHDR –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è ${machine.name} (${machine.ip}:${machine.port})`);
    shdrManager.addMachine(shdrConfig);
});

// –°–æ–±—ã—Ç–∏—è SHDR Manager
shdrManager.on('machineConnected', (machineId: string) => {
    console.log(`üéâ SHDR –º–∞—à–∏–Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞: ${machineId}`);
});

shdrManager.on('machineDisconnected', (machineId: string) => {
    console.log(`üòû SHDR –º–∞—à–∏–Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞: ${machineId}`);
});

shdrManager.on('dataReceived', (machineId: string, dataItem: any) => {
    console.log(`üìä SHDR –¥–∞–Ω–Ω—ã–µ –æ—Ç ${machineId}: ${dataItem.dataItem} = ${dataItem.value}`);
});

// API endpoints
app.get('/', (req, res) => {
    res.send(`
        <h1>üè≠ MTConnect Modernized System</h1>
        <h2>Direct SHDR + ADAM Integration</h2> 
        <div style="background: #f0f8ff; padding: 15px; margin: 10px 0; border-radius: 5px;">
            <h3>üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</h3>
            <p><strong>FANUC —Å—Ç–∞–Ω–∫–æ–≤:</strong> ${FANUC_MACHINES.length}</p>
            <p><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</strong> –ü—Ä—è–º—ã–µ SHDR –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ë–ï–ó MTConnect –∞–≥–µ–Ω—Ç–æ–≤)</p>
        </div>
        <ul>
            <li><a href="/api/machines">üìã –°–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω</a></li>
            <li><a href="/api/adam/counters">üî¢ ADAM —Å—á–µ—Ç—á–∏–∫–∏</a></li>
            <li><a href="/health">üíö Health Check</a></li>
        </ul>
        <p><em>–ü–æ—Ä—Ç: ${port}</em></p>
    `);
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–∞—à–∏–Ω (—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å –¥–∞—à–±–æ—Ä–¥–æ–º)
app.get('/api/machines', async (req, res) => {
    // MTConnect –º–∞—à–∏–Ω—ã (FANUC)
    const mtconnectMachines = FANUC_MACHINES.map(machine => {
        const connectionStatus = shdrManager.getMachineConnectionStatus(machine.id);
        const machineData = shdrManager.getMachineData(machine.id);
        const cycleTimeData = shdrManager.getMachineCycleTime(machine.id);

        const partCount = machineData?.get('part_count')?.value || 'N/A';
        const program = machineData?.get('program')?.value || 'N/A';
        const execution = machineData?.get('execution')?.value || 'N/A';
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Ü–∏–∫–ª–∞
        const cycleTime = cycleTimeData?.cycleTimeMs 
            ? (cycleTimeData.cycleTimeMs / 1000).toFixed(2) 
            : 'N/A';

        return {
            id: machine.id,
            name: machine.name,
            ip: machine.ip,
            port: machine.port,
            type: machine.type,
            status: connectionStatus ? 'online' : 'offline', // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            connectionStatus: connectionStatus ? 'ACTIVE' : 'INACTIVE',
            category: 'mtconnect',
            partCount: partCount,
            program: program,
            execution: execution,
            cycleTime: cycleTime,
            cycleConfidence: cycleTimeData?.confidence || 'N/A',
            source: 'SHDR (Direct)'
        };
    });
    
    // ADAM –º–∞—à–∏–Ω—ã (–ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    let adamMachines: any[] = [];
    try {
        const counters = await adamReader.readCounters();
        console.log(`üìä API: –ü–æ–ª—É—á–µ–Ω–æ ${counters.length} ADAM —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞`);
        adamMachines = counters.map(counter => ({
            id: counter.machineId,
            name: counter.machineId,
            type: 'ADAM-6050',
            count: counter.count,
            cycleTime: counter.cycleTimeMs ? (counter.cycleTimeMs / 1000).toFixed(2) : 'N/A',
            confidence: counter.confidence || 'N/A',
            status: 'active',
            category: 'adam'
        }));
    } catch (error) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ADAM –¥–∞–Ω–Ω—ã—Ö:', error);
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –æ–∂–∏–¥–∞–µ–º–æ–º –¥–∞—à–±–æ—Ä–¥–æ–º
    const response = {
        summary: {
            total: mtconnectMachines.length + adamMachines.length,
            mtconnect: {
                online: mtconnectMachines.filter(m => m.status === 'online').length,
                total: mtconnectMachines.length
            },
            adam: {
                online: adamMachines.length,
                total: adamMachines.length
            }
        },
        machines: {
            mtconnect: mtconnectMachines,
            adam: adamMachines
        },
        timestamp: new Date().toISOString()
    };
    
    res.json(response);
});

// Health check
app.get('/health', async (req, res) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ ADAM-6050
        let adamStatus = 'OK';
        let adamCounters = 0;
        try {
            const counters = await adamReader.readCounters();
            adamCounters = counters.length;
        } catch (error) {
            adamStatus = 'ERROR';
        }
        
        res.json({
            status: 'OK',
            timestamp: new Date().toISOString(),
            uptime: process.uptime(),
            adam6050: {
                status: adamStatus,
                counters: adamCounters
            },
            machines: FANUC_MACHINES.length,
            shdrConnections: shdrManager.getAllConnectionStatuses()
        });
    } catch (error) {
        res.status(500).json({
            status: 'ERROR',
            timestamp: new Date().toISOString(),
            error: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});

// API –¥–ª—è ADAM —Å—á–µ—Ç—á–∏–∫–æ–≤
app.get('/api/adam/counters', async (req, res) => {
    try {
        const counters = await adamReader.readCounters();
        res.json({
            success: true,
            timestamp: new Date().toISOString(),
            counters: counters
        });
    } catch (error: any) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// API –¥–ª—è SHDR –¥–∞–Ω–Ω—ã—Ö
app.get('/api/shdr/data', (req, res) => {
    const shdrData: any = {};
    
    FANUC_MACHINES.forEach(machine => {
        const data = shdrManager.convertToMTConnectFormat(machine.id);
        shdrData[machine.id] = {
            machineName: machine.name,
            connectionStatus: 'active',
            data: data || null
        };
    });
    
    res.json({
        timestamp: new Date().toISOString(),
        machines: shdrData
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer(): Promise<void> {
    app.listen(port, () => {
        console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
        console.log(`üí° –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${port}/dashboard-new.html –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞—à–±–æ—Ä–¥–∞`);
    });
}

// Graceful shutdown
async function gracefulShutdown(): Promise<void> {
    console.log('\nüîå –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    console.log('üîÑ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ SHDR –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...');
    shdrManager.disconnectAll();
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
    process.exit(0);
}

process.on('SIGINT', gracefulShutdown);
process.on('SIGTERM', gracefulShutdown);

// Main function
async function main() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...');
    await startServer();
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞');
}

main().catch(console.error); 