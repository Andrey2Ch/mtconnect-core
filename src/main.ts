import express from 'express';
import cors from 'cors';
import * as path from 'path';
import axios from 'axios';
import { parseStringPromise as xmlParse, Builder as XmlBuilder } from 'xml2js';
import xml2js from 'xml2js';
import * as fs from 'fs';
import { SHDRManager, SHDRConnectionConfig } from './shdr-client';
// import cycleTracker from './cycle-tracker'; // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π)
const configName = process.argv.includes('--simulator') ? 'config-simulator.json' : 'config.json';
const configPath = path.join(__dirname, configName);

console.log(`üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${configName}`);

if (!fs.existsSync(configPath)) {
    throw new Error(`‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${configPath}`);
}

const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));

const DEBUG_DETAILS = process.env.DEBUG_DETAILS === 'true' || config.settings.debugDetails;

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
interface MachineConfig {
    id: string;
    name: string;
    ip: string;
    port: number;
    type: string;
    mtconnectAgentUrl: string;
    uuid: string;
    spindles: string[];
    axes: string[];
    isSimulator?: boolean; // –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è SHDR –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
}

interface PartCountState {
    lastCount: number;
    lastTimestamp: Date;
    lastCycleTimeMs?: number; // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ü–∏–∫–ª–∞
    lastCycleTimeSample?: any; // –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π Sample –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
}

interface ExecutionStatusState {
    lastStatus: string;
    timestamp: string;
}

// Map –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∞–Ω–∫–∞
const partCountStates = new Map<string, PartCountState>();
const executionStatusStates = new Map<string, ExecutionStatusState>();

const app = express();
const port = config.settings.serverPort || 5000;

// Middleware
app.use(cors());
app.use(express.static('public'));
app.use(express.json());

// Configuration –º–∞—à–∏–Ω FANUC –∏–∑ config.json
const FANUC_MACHINES: MachineConfig[] = config.machines;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SHDR Manager –¥–ª—è —Å–∏–º—É–ª—è—Ç–æ—Ä–æ–≤ –∏ –ø—Ä—è–º—ã—Ö SHDR –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
const shdrManager = new SHDRManager();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SHDR –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –º–∞—à–∏–Ω —Å isSimulator: true
FANUC_MACHINES.filter(machine => machine.isSimulator).forEach(machine => {
    const shdrConfig: SHDRConnectionConfig = {
        ip: machine.ip,
        port: machine.port,
        machineId: machine.id,
        machineName: machine.name,
        reconnectInterval: 5000,
        timeout: 10000
    };
    
    console.log(`üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SHDR –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è ${machine.name} (${machine.ip}:${machine.port})`);
    shdrManager.addMachine(shdrConfig);
});

// –°–æ–±—ã—Ç–∏—è SHDR Manager
shdrManager.on('machineConnected', (machineId: string) => {
    console.log(`üéâ SHDR –º–∞—à–∏–Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞: ${machineId}`);
});

shdrManager.on('machineDisconnected', (machineId: string) => {
    console.log(`üòû SHDR –º–∞—à–∏–Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞: ${machineId}`);
});

shdrManager.on('dataReceived', (machineId: string, dataItem: any) => {
    if (DEBUG_DETAILS) {
        console.log(`üìä SHDR –¥–∞–Ω–Ω—ã–µ –æ—Ç ${machineId}: ${dataItem.dataItem} = ${dataItem.value}`);
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ XML –¥–∞–Ω–Ω—ã—Ö
async function generateMTConnectXML(): Promise<string> {
    const timestamp = new Date().toISOString();
    const xmlBuilder = new XmlBuilder({ headless: true, renderOpts: { pretty: false } });
    let deviceStreamsXmlParts: string[] = [];

    for (const machine of FANUC_MACHINES) {
        let deviceStreamDataObject: any = null; 

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ SHDR –º–∞—à–∏–Ω–∞ (—Å–∏–º—É–ª—è—Ç–æ—Ä) –∏–ª–∏ –æ–±—ã—á–Ω—ã–π MTConnect –∞–≥–µ–Ω—Ç
        if (machine.isSimulator) {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç SHDR Manager
            const shdrData = shdrManager.convertToMTConnectFormat(machine.id);
            if (shdrData) {
                deviceStreamDataObject = shdrData;
                console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è ${machine.name} (${machine.id}) –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç SHDR`);
            } else {
                console.log(`‚ö†Ô∏è –ù–µ—Ç SHDR –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${machine.name} (${machine.id})`);
                continue;
            }
        } else if (machine.mtconnectAgentUrl) {
            try {
                console.log(`üîÑ –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ—Ç MTConnect Agent –¥–ª—è ${machine.name} (${machine.id}) –ø–æ –∞–¥—Ä–µ—Å—É ${machine.mtconnectAgentUrl}/current`);
                const response = await axios.get(`${machine.mtconnectAgentUrl}/current`, { timeout: 2500 });
                const agentXmlRaw = response.data;
                const agentXml = response.data;
                const parsedAgentXml = await xmlParse(agentXml as string, { explicitArray: false });

                if (parsedAgentXml.MTConnectStreams && parsedAgentXml.MTConnectStreams.Streams && parsedAgentXml.MTConnectStreams.Streams.DeviceStream) {
                    deviceStreamDataObject = parsedAgentXml.MTConnectStreams.Streams.DeviceStream;
                    
                    deviceStreamDataObject.$ = deviceStreamDataObject.$ || {};
                    deviceStreamDataObject.$.name = machine.name; 
                    deviceStreamDataObject.$.uuid = machine.id;   
                    console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è ${machine.name} (${machine.id}) –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç MTConnect Agent`);

                    // ---> –ù–ê–ß–ê–õ–û –§–ò–ù–ê–õ–¨–ù–û–ô –í–ï–†–°–ò–ò –õ–û–ì–ò–ö–ò –†–ê–°–ß–ï–¢–ê –í–†–ï–ú–ï–ù–ò –¶–ò–ö–õ–ê <---
                    const processComponentTree = (component: any): any => {
                        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –ó–ê–ú–ï–ù–Ø–ï–ú –∏—Ö –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ
                        if (component.ComponentStream) {
                            const subStreams = Array.isArray(component.ComponentStream) ? component.ComponentStream : [component.ComponentStream];
                            // –ò—Å–ø–æ–ª—å–∑—É–µ–º map –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                            const updatedSubStreams = subStreams.map(processComponentTree);
                            // –û–±–Ω–æ–≤–ª—è–µ–º ComponentStream –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
                            component.ComponentStream = updatedSubStreams.length === 1 ? updatedSubStreams[0] : updatedSubStreams;
                        }

                        // –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º Path
                        const isPath = component.$?.name === 'path' || component.$?.componentId === 'pth' || component.$?.component === 'Path';
                        if (!isPath) {
                            return component; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                        }

                        // --- –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PartCount –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è CycleTime (–æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π) ---
                        const partCountEvent = component.Events?.PartCount;
                        if (partCountEvent && partCountEvent._ && partCountEvent.$.timestamp) {
                            const currentPartCount = parseInt(partCountEvent._, 10);
                            if (!isNaN(currentPartCount)) {
                                const currentTimestampDate = new Date(partCountEvent.$.timestamp);
                                const machineState = partCountStates.get(machine.id);

                                if (machineState && currentPartCount > machineState.lastCount) {
                                    const cycleTimeMs = currentTimestampDate.getTime() - machineState.lastTimestamp.getTime();
                                    const partsProduced = currentPartCount - machineState.lastCount;
                                    const averageCycleTimeMs = cycleTimeMs / partsProduced;

                                    console.log(` machinedetails ‚è±Ô∏è –¶–∏–∫–ª –¥–ª—è ${machine.name} (${machine.id}): ${partsProduced} –¥–µ—Ç. –∑–∞ ${cycleTimeMs / 1000} —Å–µ–∫. (—Å—Ä–µ–¥–Ω–µ–µ: ${averageCycleTimeMs / 1000} —Å–µ–∫/–¥–µ—Ç.)`);

                                    const cycleTimeSample = {
                                        $: {
                                            dataItemId: 'cycle_time_avg',
                                            timestamp: currentTimestampDate.toISOString(),
                                            name: 'CycleTime',
                                            sequence: Math.floor(Math.random() * 100000),
                                            subType: 'AVERAGE',
                                            type: 'PROCESS_TIMER'
                                        },
                                        _: (averageCycleTimeMs / 1000).toFixed(2)
                                    };

                                    if (!component.Samples) component.Samples = {};
                                    if (!component.Samples.ProcessTimer) {
                                        component.Samples.ProcessTimer = [];
                                    }
                                    if (!Array.isArray(component.Samples.ProcessTimer)) {
                                        component.Samples.ProcessTimer = [component.Samples.ProcessTimer];
                                    }
                                    component.Samples.ProcessTimer.push(cycleTimeSample);
                                    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω CycleTime Sample –¥–ª—è ${machine.name}`);
                                    
                                    partCountStates.set(machine.id, {
                                        lastCount: currentPartCount,
                                        lastTimestamp: currentTimestampDate,
                                        lastCycleTimeMs: averageCycleTimeMs,
                                        lastCycleTimeSample: cycleTimeSample // –°–æ—Ö—Ä–∞–Ω—è–µ–º Sample
                                    });
                                } else if (!machineState || currentPartCount !== machineState.lastCount) {
                                    console.log(` machinedetails ‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω PartCount –¥–ª—è ${machine.name} (${machine.id}): ${currentPartCount} –≤ ${partCountEvent.$.timestamp}`);
                                    partCountStates.set(machine.id, {
                                        lastCount: currentPartCount,
                                        lastTimestamp: currentTimestampDate
                                    });
                                }
                            }
                        }
                        // --- –ö–æ–Ω–µ—Ü –ª–æ–≥–∏–∫–∏ ---
                        
                        return component; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π (–∏–ª–∏ –Ω–µ—Ç) –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
                    };

                    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –ü–ï–†–ï–ó–ê–ü–ò–°–´–í–ê–ï–ú –∫–æ—Ä–Ω–µ–≤–æ–π –æ–±—ä–µ–∫—Ç
                    deviceStreamDataObject = processComponentTree(deviceStreamDataObject);
                    // ---> –ö–û–ù–ï–¶ –§–ò–ù–ê–õ–¨–ù–û–ô –í–ï–†–°–ò–ò –õ–û–ì–ò–ö–ò <---

                    // ---> –ù–ê–ß–ê–õ–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ù–û–ú–ï–†–ê –ü–†–û–ì–†–ê–ú–ú–´ (–∏–∑ Block) <---
                    try {
                        let pathComponentStream: any = null;
                        if (deviceStreamDataObject && deviceStreamDataObject.ComponentStream) {
                            const components = Array.isArray(deviceStreamDataObject.ComponentStream) ? deviceStreamDataObject.ComponentStream : [deviceStreamDataObject.ComponentStream];
                            pathComponentStream = components.find((cs: any) => cs.$?.name === 'path' || cs.$?.componentId === 'pth');
                        }

                        if (pathComponentStream?.Events) {
                            const events = pathComponentStream.Events; // –° explicitArray: false, Events - –æ–±—ä–µ–∫—Ç, –µ—Å–ª–∏ —É–Ω–∏–∫–∞–ª–µ–Ω

                            let blockValue: string | null = null;
                            let blockTimestamp: string | null = null;
                            if (events.Block && events.Block._ && events.Block.$?.timestamp) {
                                blockValue = events.Block._;
                                blockTimestamp = events.Block.$.timestamp;
                            }

                            let originalProgramValue: string | null = null;
                            let originalProgramTimestamp: string | null = null;
                            if (events.Program && events.Program._ && events.Program.$?.timestamp) {
                                originalProgramValue = events.Program._;
                                originalProgramTimestamp = events.Program.$.timestamp;
                            }

                            const parsedProgFromBlock = blockValue ? extractProgramFromBlock(blockValue) : null;

                            let finalProgramDisplayValue = "-";
                            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π timestamp –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∫–∞–∫ fallback, –µ—Å–ª–∏ –Ω–∏–æ—Ç–∫—É–¥–∞ –Ω–µ —Å–º–æ–≥–ª–∏ –≤–∑—è—Ç—å timestamp –ø—Ä–æ–≥—Ä–∞–º–º—ã
                            let finalProgramDisplayTimestamp = parsedAgentXml?.MTConnectStreams?.Header?.creationTime || timestamp; 

                            if (parsedProgFromBlock && blockTimestamp) {
                                finalProgramDisplayValue = parsedProgFromBlock;
                                finalProgramDisplayTimestamp = blockTimestamp;
                            } else if (originalProgramValue && originalProgramTimestamp) {
                                finalProgramDisplayValue = originalProgramValue;
                                finalProgramDisplayTimestamp = originalProgramTimestamp;
                            }
                            
                            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º Program DataItem –≤ pathComponentStream.Events
                            if (!events.Program) { // –ï—Å–ª–∏ Program DataItem –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                                events.Program = { $: {} }; 
                            }
                            events.Program._ = finalProgramDisplayValue;
                            events.Program.$ = events.Program.$ || {}; // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ $ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                            events.Program.$.timestamp = finalProgramDisplayTimestamp;
                            events.Program.$.dataItemId = 'program'; 
                            events.Program.$.name = 'program'; 
                            if(!events.Program.$.sequence) { 
                                events.Program.$.sequence = parsedAgentXml?.MTConnectStreams?.Header?.nextSequence || '0';
                            }
                            if (DEBUG_DETAILS) console.log(`machinedetails üìù –û–±–Ω–æ–≤–ª–µ–Ω Program –¥–ª—è ${machine.name} (${machine.id}): ${finalProgramDisplayValue} –≤ ${finalProgramDisplayTimestamp}`);
                        }
                    } catch (e: any) {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è ${machine.name} (${machine.id}): ${e.message}`);
                    }
                    // ---> –ö–û–ù–ï–¶ –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ù–û–ú–ï–†–ê –ü–†–û–ì–†–ê–ú–ú–´ <---

                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ Execution Status
                    const componentsArg = deviceStreamDataObject?.ComponentStream;
                    const executionStatusValue = findExecutionStatusRecursive(componentsArg ? (Array.isArray(componentsArg) ? componentsArg : [componentsArg]) : undefined);

                    if (DEBUG_DETAILS) console.log(`–ù–∞–π–¥–µ–Ω Execution —Å—Ç–∞—Ç—É—Å –¥–ª—è ${machine.name} (${machine.id}):`, executionStatusValue);

                    if (executionStatusValue !== null) {
                        const currentExecutionStatus = executionStatusValue;
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ XML –∞–≥–µ–Ω—Ç–∞ (–∏–ª–∏ fallback)
                        const currentExecutionStatusTimestamp = parsedAgentXml?.MTConnectStreams?.Header?.creationTime || timestamp; 

                        const previousExecutionState = executionStatusStates.get(machine.id);

                        if (previousExecutionState) {
                            if (currentExecutionStatus !== previousExecutionState.lastStatus) {
                                console.log(`machinedetails üîÑ –°—Ç–∞—Ç—É—Å Execution –¥–ª—è ${machine.name} (${machine.id}) –∏–∑–º–µ–Ω–∏–ª—Å—è: –ë–´–õ ${previousExecutionState.lastStatus}, –°–¢–ê–õ ${currentExecutionStatus} –≤ ${currentExecutionStatusTimestamp}`);
                                executionStatusStates.set(machine.id, { lastStatus: currentExecutionStatus, timestamp: currentExecutionStatusTimestamp });
                            }
                        } else {
                            console.log(`machinedetails ‚ÑπÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω Execution —Å—Ç–∞—Ç—É—Å –¥–ª—è ${machine.name} (${machine.id}): ${currentExecutionStatus} –≤ ${currentExecutionStatusTimestamp}`);
                            executionStatusStates.set(machine.id, { lastStatus: currentExecutionStatus, timestamp: currentExecutionStatusTimestamp });
                        }
                    }

                } else {
                    console.warn(`‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ XML –æ—Ç –∞–≥–µ–Ω—Ç–∞ –¥–ª—è ${machine.name} (${machine.id})`);
                }
            } catch (error: any) {
                console.error(`‚ùå –û–®–ò–ë–ö–ê –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MTConnect Agent ${machine.name} (${machine.id}): ${error.message}`);
                console.error(`üîó URL: ${machine.mtconnectAgentUrl}/current`);
                // –ù–ï –ì–ï–ù–ï–†–ò–†–£–ï–ú FALLBACK! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–Ω–æ–∫ –µ—Å–ª–∏ –æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                continue;
            }
        } else {
            console.error(`üö® –ú–∞—à–∏–Ω–∞ ${machine.name} (${machine.id}) –Ω–µ –∏–º–µ–µ—Ç mtconnectAgentUrl! –ü–†–û–ü–£–°–ö–ê–ï–ú.`);
            // –ù–ï –ì–ï–ù–ï–†–ò–†–£–ï–ú UNAVAILABLE! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–Ω–æ–∫
            continue;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (deviceStreamDataObject) {
            // --- –ù–ê–ß–ê–õ–û: –í–†–ï–ú–ï–ù–ù–´–ô –û–¢–õ–ê–î–û–ß–ù–´–ô –ö–û–î ---
            if (['SR-10', 'SR-21', 'SR-23'].includes(machine.id)) {
                try {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                    const debugFileName = `debug-${machine.id}-object.json`;
                    fs.writeFileSync(path.join(__dirname, '..', debugFileName), JSON.stringify(deviceStreamDataObject, null, 2));
                    console.log(`‚úÖ DEBUG: –û–±—ä–µ–∫—Ç –¥–ª—è ${machine.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${debugFileName}`);
                } catch (e: any) {
                    console.error(`‚ùå DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è ${machine.id}.`, e.message);
                }
            }
            // --- –ö–û–ù–ï–¶: –í–†–ï–ú–ï–ù–ù–´–ô –û–¢–õ–ê–î–û–ß–ù–´–ô –ö–û–î ---
            deviceStreamsXmlParts.push(xmlBuilder.buildObject({ DeviceStream: deviceStreamDataObject }) as string);
        }
    }

    const streamsContent = deviceStreamsXmlParts.join('\n');
    const headerSequence = deviceStreamsXmlParts.length || 0;
    
    return `<?xml version="1.0" encoding="UTF-8"?>
<MTConnectStreams xmlns="urn:mtconnect.org:MTConnectStreams:1.3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:mtconnect.org:MTConnectStreams:1.3 http://www.mtconnect.org/schemas/MTConnectStreams_1.3.xsd">
    <Header creationTime="${timestamp}" sender="MTConnect Local Agent" instanceId="1" version="1.3.0" bufferSize="131072" firstSequence="1" lastSequence="${headerSequence}" nextSequence="${headerSequence + 1}"/>
    <Streams>
        ${streamsContent}
    </Streams>
</MTConnectStreams>`;
}

// API endpoints
app.get('/', (req, res) => {
    res.send(`
        <h1>üè≠ MTConnect Local Agent</h1>
        <h2>FANUC MTConnect Integration</h2> 
        <div style="background: #f0f8ff; padding: 15px; margin: 10px 0; border-radius: 5px;">
            <h3>üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</h3>
            <p><strong>–í—Å–µ–≥–æ —Å—Ç–∞–Ω–∫–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ:</strong> ${FANUC_MACHINES.length}</p>
            <p>–í—Å–µ —Å—Ç–∞–Ω–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —á–µ—Ä–µ–∑ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ MTConnect –∞–≥–µ–Ω—Ç—ã.</p>
        </div>
        <ul>
            <li><a href="/probe">üì° Probe (Device Info)</a></li>
            <li><a href="/current">üìä Current Data (Real-time)</a></li>
            <li><a href="/health">üíö Health Check</a></li>
            <li><a href="/real">üî• Real Dashboard</a></li>
        </ul>
        <p><em>–ü–æ—Ä—Ç: ${port}</em></p>
    `);
});

app.get('/probe', (req, res) => {
    res.set('Content-Type', 'application/xml');
    const timestamp = new Date().toISOString();
    let devicesXml = '';

    // Probe –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ –¥–ª—è –≤—Å–µ—Ö, —Ç.–∫. dashboard.html –µ–≥–æ –Ω–µ —Å–∏–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
    FANUC_MACHINES.forEach(machine => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º machine.id –¥–ª—è UUID, —á—Ç–æ–±—ã –¥–∞—à–±–æ—Ä–¥ –º–æ–≥ —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å
        const deviceUuid = machine.id; 
        devicesXml += `
            <Device id="${deviceUuid}" name="${machine.name}" uuid="${deviceUuid}">
                <Description manufacturer="FANUC" model="${machine.type || 'Generic CNC'}" serialNumber="${deviceUuid}-SN"/>
                <DataItems>
                    <DataItem category="EVENT" id="avail" name="avail" type="AVAILABILITY"/>
                    <DataItem category="EVENT" id="estop" name="estop" type="EMERGENCY_STOP"/>
                    <DataItem category="EVENT" id="execution" name="execution" type="EXECUTION"/>
                    <DataItem category="EVENT" id="program" name="program" type="PROGRAM"/>
                    <DataItem category="SAMPLE" id="Sspeed" name="S1rpm" type="SPINDLE_SPEED" units="REVOLUTION/MINUTE"/>
                    <DataItem category="SAMPLE" id="feedrate" name="feed" type="PATH_FEEDRATE" units="MILLIMETER/MINUTE"/>
                    <DataItem category="SAMPLE" id="Xact" name="Xabs" type="POSITION" subType="ACTUAL" units="MILLIMETER"/>
                    <DataItem category="SAMPLE" id="Yact" name="Yabs" type="POSITION" subType="ACTUAL" units="MILLIMETER"/>
                    <DataItem category="SAMPLE" id="Zact" name="Zabs" type="POSITION" subType="ACTUAL" units="MILLIMETER"/>
                    <DataItem category="SAMPLE" id="cycle_time_avg" name="CycleTime" type="PROCESS_TIMER" subType="AVERAGE" units="SECOND"/>
                </DataItems>
            </Device>`;
    });

    const xml = `<?xml version="1.0" encoding="UTF-8"?>
<MTConnectDevices xmlns="urn:mtconnect.org:MTConnectDevices:1.3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:mtconnect.org:MTConnectDevices:1.3 http://www.mtconnect.org/schemas/MTConnectDevices_1.3.xsd">
    <Header creationTime="${timestamp}" sender="MTConnect Local Agent" instanceId="1" version="1.3.0"/>
    <Devices>
        ${devicesXml}
    </Devices>
</MTConnectDevices>`;

    res.send(xml);
});

app.get('/current', async (req, res) => {
    res.set('Content-Type', 'application/xml');
    
    try {
        const xml = await generateMTConnectXML();
        res.send(xml);
    } catch (error: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ XML –¥–ª—è /current:', error.message, error.stack);
        res.status(500).send('Internal Server Error while generating MTConnect XML');
    }
});

app.get('/health', (req, res) => {
    res.json({
        status: 'OK',
        timestamp: new Date().toISOString(),
        uptime: process.uptime()
    });
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—ã—Ä—ã—Ö XML –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç–∞–Ω–∫–∞
app.get('/api/machine/:machineId/xml', async (req, res) => {
    const machineId = req.params.machineId;
    const machine = FANUC_MACHINES.find(m => m.id === machineId);
    
    if (!machine) {
        return res.status(404).json({ error: `–°—Ç–∞–Ω–æ–∫ ${machineId} –Ω–µ –Ω–∞–π–¥–µ–Ω` });
    }

    if (!machine.mtconnectAgentUrl) {
        return res.status(400).json({ error: `–£ —Å—Ç–∞–Ω–∫–∞ ${machineId} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω MTConnect Agent URL` });
    }

    try {
        console.log(`üîÑ –ó–∞–ø—Ä–æ—Å XML –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${machine.name} (${machine.id}) –ø–æ –∞–¥—Ä–µ—Å—É ${machine.mtconnectAgentUrl}/current`);
        const response = await axios.get(`${machine.mtconnectAgentUrl}/current`, { timeout: 5000 });
        
        res.set('Content-Type', 'application/xml');
        res.send(response.data);
    } catch (error: any) {
        console.error(`‚ùå –û–®–ò–ë–ö–ê –ø–æ–ª—É—á–µ–Ω–∏—è XML –¥–ª—è ${machine.name} (${machine.id}): ${error.message}`);
        res.status(500).json({ 
            error: `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MTConnect Agent`,
            details: error.message,
            url: `${machine.mtconnectAgentUrl}/current`
        });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –º–∞—à–∏–Ω
app.get('/api/machines', (req, res) => {
    const machinesList = FANUC_MACHINES.map(machine => ({
        id: machine.id,
        name: machine.name,
        ip: machine.ip,
        port: machine.port,
        type: machine.type,
        agentUrl: machine.mtconnectAgentUrl,
        hasAgent: !!machine.mtconnectAgentUrl
    }));
    
    res.json(machinesList);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer(): Promise<void> {
    app.listen(port, () => {
        console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
        console.log('üí° –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:5000/real-dashboard.html –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞—à–±–æ—Ä–¥–∞');
    });
}

// Graceful shutdown
async function gracefulShutdown(): Promise<void> {
    console.log('\nüîå –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');
    console.log('üîÑ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ SHDR –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...');
    shdrManager.disconnectAll();
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
    process.exit(0);
}

process.on('SIGINT', gracefulShutdown);
process.on('SIGTERM', gracefulShutdown);

// Main async function
async function main() {
    try {
        await startServer();
    } catch (error) {
        console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:", error);
        process.exit(1);
    }
}

function findExecutionStatusRecursive(components: any[] | undefined): string | null {
    if (!components) {
        return null;
    }
    for (const component of components) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Events –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ —Ç–µ–∫—É—â–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Controller)
        if (component.Events?.Execution?._) {
            if (DEBUG_DETAILS) console.log(`–ù–∞–π–¥–µ–Ω Execution –Ω–∞–ø—Ä—è–º—É—é –≤ Events –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ${component.$?.name || component.$?.id}: ${component.Events.Execution._}`);
            return component.Events.Execution._;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ ComponentStream
        if (component.ComponentStream) {
            const subStreams = Array.isArray(component.ComponentStream) ? component.ComponentStream : [component.ComponentStream];
            for (const subComponent of subStreams) {
                // –°–ª—É—á–∞–π –¥–ª—è <ComponentStream name="path"> <Events> <Execution> ... </Events> </ComponentStream>
                if (subComponent.$ && (subComponent.$.name === 'path' || subComponent.$.id === 'pth') && subComponent.Events?.Execution?._) {
                    if (DEBUG_DETAILS) console.log(`–ù–∞–π–¥–µ–Ω Execution –≤ path: ${subComponent.Events.Execution._}`);
                    return subComponent.Events.Execution._;
                }
                // –û–±—â–∏–π —Å–ª—É—á–∞–π –¥–ª—è <Events> <Execution> ... </Events> –≤–Ω—É—Ç—Ä–∏ –ª—é–±–æ–≥–æ ComponentStream
                if (subComponent.Events?.Execution?._) {
                    if (DEBUG_DETAILS) console.log(`–ù–∞–π–¥–µ–Ω Execution –≤ Events —Å—É–±–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ${subComponent.$?.name || subComponent.$?.id}: ${subComponent.Events.Execution._}`);
                    return subComponent.Events.Execution._;
                }
                // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö ComponentStream
                if (subComponent.ComponentStream) {
                    const nestedComponents = Array.isArray(subComponent.ComponentStream) ? subComponent.ComponentStream : [subComponent.ComponentStream];
                    const foundInChildren = findExecutionStatusRecursive(nestedComponents);
                    if (foundInChildren) {
                        return foundInChildren;
                    }
                }
            }
        }
    }
    return null;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ Block
function extractProgramFromBlock(blockString: string): string | null {
    if (!blockString) return null;

    // 1. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ —Å–∫–æ–±–∫–∞—Ö (O1234) –∏–ª–∏ (123-45)
    let match = blockString.match(/\(([^)]+)\)/);
    if (match && match[1]) {
        return match[1];
    }

    // 2. –ï—Å–ª–∏ —Å–∫–æ–±–æ–∫ –Ω–µ—Ç, –∏—â–µ–º –Ω–æ–º–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ—Å–ª–µ –±—É–∫–≤—ã 'O' –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏/–±–ª–æ–∫–∞
    //    –≠—Ç–æ –±—É–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞–º O701-02, O1234 –∏ —Ç.–¥.
    match = blockString.match(/^O(\d{1,5}[-\.]\d{1,5}|\d{1,8})/);
    if (match && match[0]) { // match[0] —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä "O701-02"
        return match[0];
    }
    
    // 3. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Program
    return null;
}

main(); 