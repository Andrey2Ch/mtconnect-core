interface CycleTimeChange {
  timestamp: Date;
  count: number;
  delta: number;
}

interface CycleTimeHistory {
  machineId: string;
  changes: CycleTimeChange[];
  lastCount?: number;
  consecutiveNormalCycles?: number; // –°—á–µ—Ç—á–∏–∫ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤
  recoveryThreshold?: number; // –ü–æ—Ä–æ–≥ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (—Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ü–∏–∫–ª–∞)
}

export class CycleTimeCalculator {
  private histories: Map<string, CycleTimeHistory> = new Map();
  private restoredIdleTimes: Map<string, number> = new Map(); // üíæ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è –∏–∑ –∫—ç—à–∞

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è –∏–∑ –∫—ç—à–∞ –¥–ª—è –º–∞—à–∏–Ω—ã
   * @param machineId - ID –º–∞—à–∏–Ω—ã
   * @param restoredIdleMinutes - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è –≤ –º–∏–Ω—É—Ç–∞—Ö
   */
  setRestoredIdleTime(machineId: string, restoredIdleMinutes: number): void {
    this.restoredIdleTimes.set(machineId, restoredIdleMinutes);
    console.log(`üíæ ${machineId}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è ${restoredIdleMinutes} –º–∏–Ω`);
  }

  updateCount(machineId: string, newCount: number): void {
    let history = this.histories.get(machineId);
    
    if (!history) {
      // –ü–µ—Ä–≤—ã–π —Ä–∞–∑ - –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º
      history = { machineId, changes: [], lastCount: newCount };
      this.histories.set(machineId, history);
      console.log(`üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è ${machineId}, –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${newCount.toLocaleString()}`);
      return;
    }

    // –ï—Å–ª–∏ —Å—á–µ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–∏–ª—Å—è - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    if (newCount > history.lastCount!) {
      const delta = newCount - history.lastCount!;
      history.changes.push({ 
        timestamp: new Date(), 
        count: newCount,
        delta 
      });
      
      console.log(`üîÑ ${machineId}: —Å—á–µ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è —Å ${history.lastCount!.toLocaleString()} –Ω–∞ ${newCount.toLocaleString()} (+${delta}) –≤ ${new Date().toLocaleTimeString()}`);
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∏–∑–º–µ–Ω–µ–Ω–∏–π)
      if (history.changes.length > 50) {
        history.changes.shift();
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞
    if (newCount < history.lastCount!) {
      console.log(`üîÑ ${machineId}: —Å—á–µ—Ç—á–∏–∫ –°–ë–†–û–®–ï–ù —Å ${history.lastCount!.toLocaleString()} –Ω–∞ ${newCount.toLocaleString()}`);
      history.changes = []; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    }

    history.lastCount = newCount;
  }

  getCycleTime(machineId: string): { cycleTimeMs?: number; partsInCycle: number; confidence: string; isAnomalous?: boolean; machineStatus?: 'ACTIVE' | 'IDLE' | 'OFFLINE'; idleTimeMinutes?: number } {
    const history = this.histories.get(machineId);
    
    // üíæ –ü–æ–ª—É—á–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è –∏–∑ –∫—ç—à–∞ –≤ –Ω–∞—á–∞–ª–µ
    const restoredIdleTime = this.restoredIdleTimes.get(machineId) || 0;
    
    // üïí –°–õ–£–ß–ê–ô 1: –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤–æ–æ–±—â–µ (–Ω–æ–≤–∞—è –º–∞—à–∏–Ω–∞)
    if (!history || history.changes.length === 0) {
      // –î–ª—è –º–∞—à–∏–Ω –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –æ–Ω–∏ —Å—Ç–æ—è—Ç —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã + –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
      const systemUptimeMinutes = Math.min(Math.round(process.uptime() / 60), 60); // –º–∞–∫—Å–∏–º—É–º 60 –º–∏–Ω—É—Ç
      const totalIdleMinutes = systemUptimeMinutes + restoredIdleTime;
      console.log(`üü° ${machineId}: –ü–†–û–°–¢–û–ô - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—à–∏–Ω–µ (–Ω–æ–≤–∞—è)`);
      console.log(`üïí ${machineId}: idleTimeMinutes = ${totalIdleMinutes} (—Å–∏—Å—Ç–µ–º–∞: ${systemUptimeMinutes} + –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π: ${restoredIdleTime})`);
      return { 
        cycleTimeMs: undefined, 
        partsInCycle: 0,
        confidence: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
        isAnomalous: true,
        machineStatus: 'IDLE',
        idleTimeMinutes: totalIdleMinutes // üïí –í–†–ï–ú–Ø –° –ó–ê–ü–£–°–ö–ê –°–ò–°–¢–ï–ú–´ + –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–û–ï
      };
    }
    
    // üïí –°–õ–£–ß–ê–ô 2: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ (< 2 –∏–∑–º–µ–Ω–µ–Ω–∏—è)
    if (history.changes.length < 2) {
      const lastChange = history.changes[history.changes.length - 1];
      const timeSinceLastPart = Date.now() - lastChange.timestamp.getTime();
      const currentIdleMinutes = Math.round(timeSinceLastPart / 60000);
      const totalIdleMinutes = currentIdleMinutes + restoredIdleTime;
      
      console.log(`üü° ${machineId}: –ü–†–û–°–¢–û–ô - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ü–∏–∫–ª–∞`);
      console.log(`üïí ${machineId}: idleTimeMinutes = ${totalIdleMinutes} (—Ç–µ–∫—É—â–∏–π: ${currentIdleMinutes} + –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π: ${restoredIdleTime})`);
      
      return { 
        cycleTimeMs: undefined, 
        partsInCycle: 1,
        confidence: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö',
        isAnomalous: true,
        machineStatus: 'IDLE',
        idleTimeMinutes: totalIdleMinutes
      };
    }

    const first = history.changes[0];
    const last = history.changes[history.changes.length - 1];
    
    const totalTimeMs = last.timestamp.getTime() - first.timestamp.getTime();
    const totalParts = last.count - first.count;
    
    // üïí –°–õ–£–ß–ê–ô 3: –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–∞ (–º–∞—à–∏–Ω–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
    if (totalParts <= 0 || totalTimeMs <= 0) {
      const timeSinceLastPart = Date.now() - last.timestamp.getTime();
      const currentIdleMinutes = Math.round(timeSinceLastPart / 60000);
      const totalIdleMinutes = currentIdleMinutes + restoredIdleTime;
      
      console.log(`üü° ${machineId}: –ü–†–û–°–¢–û–ô - –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–∞`);
      console.log(`üïí ${machineId}: idleTimeMinutes = ${totalIdleMinutes} (—Ç–µ–∫—É—â–∏–π: ${currentIdleMinutes} + –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π: ${restoredIdleTime})`);
      
      return { 
        cycleTimeMs: undefined, 
        partsInCycle: totalParts,
        confidence: '–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–∞',
        isAnomalous: true,
        machineStatus: 'IDLE',
        idleTimeMinutes: totalIdleMinutes
      };
    }
    
    const avgCycleTimeMs = totalTimeMs / totalParts;
    
    // üß† –£–ú–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ê–ù–û–ú–ê–õ–ò–ô –ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø
    const isAnomalous = this.isAnomalousCycleTime(machineId, avgCycleTimeMs, history);
    const isRecovered = this.checkRecoveryStatus(machineId, avgCycleTimeMs, history, isAnomalous);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç–∞–Ω–∫–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è
    let machineStatus: 'ACTIVE' | 'IDLE' | 'OFFLINE' = 'ACTIVE';
    let idleTimeMinutes = 0; // üïí –í–†–ï–ú–Ø –ü–†–û–°–¢–û–Ø
    
    if (isAnomalous && !isRecovered) {
      machineStatus = 'IDLE'; // –°—Ç–∞–Ω–æ–∫ —Å—Ç–æ–∏—Ç (–±–æ–ª—å—à–æ–µ –≤—Ä–µ–º—è —Ü–∏–∫–ª–∞ = –ø—Ä–æ—Å—Ç–æ–π)
      // üïí –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è –¥–ª—è –∞–Ω–æ–º–∞–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ + –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∏–∑ –∫—ç—à–∞
      const timeSinceLastPart = Date.now() - last.timestamp.getTime();
      const currentIdleMinutes = Math.round(timeSinceLastPart / 60000);
      idleTimeMinutes = currentIdleMinutes + restoredIdleTime;
      console.log(`üü° ${machineId}: –ü–†–û–°–¢–û–ô –æ–±–Ω–∞—Ä—É–∂–µ–Ω! –í—Ä–µ–º—è —Ü–∏–∫–ª–∞ ${(avgCycleTimeMs/1000).toFixed(2)} —Å–µ–∫/–¥–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ`);
      console.log(`üïí ${machineId}: idleTimeMinutes = ${idleTimeMinutes} (—Ç–µ–∫—É—â–∏–π: ${currentIdleMinutes} + –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π: ${restoredIdleTime})`);
    } else if (isRecovered) {
      machineStatus = 'ACTIVE'; // –°—Ç–∞–Ω–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –ø–æ—Å–ª–µ –ø—Ä–æ—Å—Ç–æ—è
      console.log(`üü¢ ${machineId}: –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï! –°—Ç–∞–Ω–æ–∫ –≤–µ—Ä–Ω—É–ª—Å—è –≤ —Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ 3+ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤`);
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–≥–¥–∞ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –¥–µ—Ç–∞–ª—å
      const timeSinceLastPart = Date.now() - last.timestamp.getTime();
      const maxIdleTime = Math.max(avgCycleTimeMs * 3, 300000); // 3 —Ü–∏–∫–ª–∞ –∏–ª–∏ 5 –º–∏–Ω—É—Ç
      
      if (timeSinceLastPart > maxIdleTime) {
        machineStatus = 'IDLE'; // –°–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –¥–µ—Ç–∞–ª–µ–π
        // üïí –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è –¥–ª—è —Å–ª—É—á–∞—è "–Ω–µ—Ç –¥–≤–∏–∂–µ–Ω–∏—è" + –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∏–∑ –∫—ç—à–∞
        const currentIdleMinutes = Math.round(timeSinceLastPart / 60000);
        idleTimeMinutes = currentIdleMinutes + restoredIdleTime;
        console.log(`üü° ${machineId}: –ü–†–û–°–¢–û–ô - –Ω–µ—Ç –¥–≤–∏–∂–µ–Ω–∏—è ${(timeSinceLastPart/60000).toFixed(1)} –º–∏–Ω—É—Ç`);
        console.log(`üïí ${machineId}: idleTimeMinutes = ${idleTimeMinutes} (—Ç–µ–∫—É—â–∏–π: ${currentIdleMinutes} + –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π: ${restoredIdleTime})`);
      }
    }
    
    let confidence = '–ù–ò–ó–ö–ê–Ø';
    if (history.changes.length >= 5) {
      confidence = '–í–´–°–û–ö–ê–Ø';
    } else if (history.changes.length >= 3) {
      confidence = '–°–†–ï–î–ù–Ø–Ø';
    }
    
    // –õ–æ–≥–∏ –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã (–Ω–µ IDLE)
    if (machineStatus === 'ACTIVE') {
      console.log(`‚è±Ô∏è ${machineId}: ${totalParts} –¥–µ—Ç. –∑–∞ ${(totalTimeMs/1000).toFixed(1)} —Å–µ–∫ = ${(avgCycleTimeMs/1000).toFixed(2)} —Å–µ–∫/–¥–µ—Ç (${confidence})`);
    }

    return {
      cycleTimeMs: avgCycleTimeMs,
      partsInCycle: totalParts,
      confidence: confidence,
      isAnomalous: isAnomalous,
      machineStatus: machineStatus,
      idleTimeMinutes: idleTimeMinutes  // üïí –í–†–ï–ú–Ø –ü–†–û–°–¢–û–Ø –í –ú–ò–ù–£–¢–ê–•
    };
  }

  private isAnomalousCycleTime(machineId: string, currentCycleTimeMs: number, history: CycleTimeHistory): boolean {
    // –ù—É–∂–Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π
    if (history.changes.length < 5) {
      return false; // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–∏
    }
    
    const recentCycles = this.getRecentNormalCycles(history, 10);
    if (recentCycles.length < 3) {
      return false; // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    }
    
    const avgNormalCycle = recentCycles.reduce((sum, cycle) => sum + cycle, 0) / recentCycles.length;
    
    // üéØ –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –ü–û–†–û–ì: –µ—Å–ª–∏ –≤—Ä–µ–º—è —Ü–∏–∫–ª–∞ –±–æ–ª—å—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –Ω–∞ 20% - –∞–Ω–æ–º–∞–ª–∏—è
    const anomalyThreshold = avgNormalCycle * 1.2; // +20% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ
    
    if (currentCycleTimeMs > anomalyThreshold) {
      console.log(`üîç ${machineId}: –ê–Ω–æ–º–∞–ª–∏—è! –¢–µ–∫—É—â–∏–π —Ü–∏–∫–ª ${(currentCycleTimeMs/1000).toFixed(2)}—Å > –ø–æ—Ä–æ–≥–∞ ${(anomalyThreshold/1000).toFixed(2)}—Å (+20% –æ—Ç ${(avgNormalCycle/1000).toFixed(2)}—Å)`);
      return true;
    }
    
    return false;
  }

  private checkRecoveryStatus(machineId: string, currentCycleTimeMs: number, history: CycleTimeHistory, isCurrentAnomalous: boolean): boolean {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (history.consecutiveNormalCycles === undefined) {
      history.consecutiveNormalCycles = 0;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (—Å—Ä–µ–¥–Ω–µ–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)
    if (!history.recoveryThreshold) {
      const recentCycles = this.getRecentNormalCycles(history, 10);
      if (recentCycles.length >= 3) {
        history.recoveryThreshold = recentCycles.reduce((sum, cycle) => sum + cycle, 0) / recentCycles.length;
      }
    }
    
    if (!history.recoveryThreshold) {
      return false; // –ù–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    }
    
    // üéØ –õ–û–ì–ò–ö–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø: –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 10% –æ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    const recoveryTolerance = history.recoveryThreshold * 0.1; // ¬±10%
    const isWithinRecoveryRange = Math.abs(currentCycleTimeMs - history.recoveryThreshold) <= recoveryTolerance;
    
    if (isWithinRecoveryRange && !isCurrentAnomalous) {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤
      history.consecutiveNormalCycles = (history.consecutiveNormalCycles || 0) + 1;
      console.log(`üìà ${machineId}: –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ü–∏–∫–ª ${history.consecutiveNormalCycles}/3 –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è`);
      
      // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ 3+ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Ü–∏–∫–ª–∞ - —Å—á–∏—Ç–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–≤—à–∏–º—Å—è
      if (history.consecutiveNormalCycles >= 3) {
        history.consecutiveNormalCycles = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        return true;
      }
    } else {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ —Ü–∏–∫–ª —Å–Ω–æ–≤–∞ –∞–Ω–æ–º–∞–ª—å–Ω—ã–π
      if (history.consecutiveNormalCycles > 0) {
        console.log(`üîÑ ${machineId}: –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–∞–Ω–æ–º–∞–ª—å–Ω—ã–π —Ü–∏–∫–ª)`);
        history.consecutiveNormalCycles = 0;
      }
    }
    
    return false;
  }

  private getRecentNormalCycles(history: CycleTimeHistory, maxCount: number): number[] {
    const normalCycles: number[] = [];
    const changes = history.changes;
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –∏ –∏—â–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ —Ü–∏–∫–ª—ã
    for (let i = 1; i < changes.length && normalCycles.length < maxCount; i++) {
      const prev = changes[i - 1];
      const curr = changes[i];
      
      const timeDiffMs = curr.timestamp.getTime() - prev.timestamp.getTime();
      const partsDiff = curr.count - prev.count;
      
      if (partsDiff > 0 && timeDiffMs > 0) {
        const cycleTime = timeDiffMs / partsDiff;
        
        // –°—á–∏—Ç–∞–µ–º "–Ω–æ—Ä–º–∞–ª—å–Ω—ã–º" —Ü–∏–∫–ª –¥–æ 5 –º–∏–Ω—É—Ç (–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π)
        if (cycleTime < 5 * 60 * 1000) {
          normalCycles.push(cycleTime);
        }
      }
    }
    
    return normalCycles;
  }
} 