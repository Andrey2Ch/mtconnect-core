interface CycleTimeChange {
  timestamp: Date;
  count: number;
  delta: number;
}

interface CycleTimeHistory {
  machineId: string;
  changes: CycleTimeChange[];
  lastCount?: number;
}

export class CycleTimeCalculator {
  private histories: Map<string, CycleTimeHistory> = new Map();

  updateCount(machineId: string, newCount: number): void {
    let history = this.histories.get(machineId);
    
    if (!history) {
      // –ü–µ—Ä–≤—ã–π —Ä–∞–∑ - –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º
      history = { machineId, changes: [], lastCount: newCount };
      this.histories.set(machineId, history);
      console.log(`üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è ${machineId}, –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${newCount.toLocaleString()}`);
      return;
    }

    // –ï—Å–ª–∏ —Å—á–µ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–∏–ª—Å—è - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    if (newCount > history.lastCount!) {
      const delta = newCount - history.lastCount!;
      history.changes.push({ 
        timestamp: new Date(), 
        count: newCount,
        delta 
      });
      
      console.log(`üîÑ ${machineId}: —Å—á–µ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è —Å ${history.lastCount!.toLocaleString()} –Ω–∞ ${newCount.toLocaleString()} (+${delta}) –≤ ${new Date().toLocaleTimeString()}`);
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∏–∑–º–µ–Ω–µ–Ω–∏–π)
      if (history.changes.length > 50) {
        history.changes.shift();
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞
    if (newCount < history.lastCount!) {
      console.log(`üîÑ ${machineId}: —Å—á–µ—Ç—á–∏–∫ –°–ë–†–û–®–ï–ù —Å ${history.lastCount!.toLocaleString()} –Ω–∞ ${newCount.toLocaleString()}`);
      history.changes = []; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    }

    history.lastCount = newCount;
  }

  getCycleTime(machineId: string): { cycleTimeMs?: number; partsInCycle: number; confidence: string } {
    const history = this.histories.get(machineId);
    
    if (!history || history.changes.length < 2) {
      return { 
        cycleTimeMs: undefined, 
        partsInCycle: history?.changes.length || 0,
        confidence: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö'
      };
    }

    const first = history.changes[0];
    const last = history.changes[history.changes.length - 1];
    
    const totalTimeMs = last.timestamp.getTime() - first.timestamp.getTime();
    const totalParts = last.count - first.count;
    
    if (totalParts <= 0 || totalTimeMs <= 0) {
      return { 
        cycleTimeMs: undefined, 
        partsInCycle: totalParts,
        confidence: '–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–∞'
      };
    }
    
    const avgCycleTimeMs = totalTimeMs / totalParts;
    
    let confidence = '–ù–ò–ó–ö–ê–Ø';
    if (history.changes.length >= 5) {
      confidence = '–í–´–°–û–ö–ê–Ø';
    } else if (history.changes.length >= 3) {
      confidence = '–°–†–ï–î–ù–Ø–Ø';
    }
    
    console.log(`‚è±Ô∏è ${machineId}: ${totalParts} –¥–µ—Ç. –∑–∞ ${(totalTimeMs/1000).toFixed(1)} —Å–µ–∫ = ${(avgCycleTimeMs/1000).toFixed(2)} —Å–µ–∫/–¥–µ—Ç (${confidence})`);
    
    return {
      cycleTimeMs: avgCycleTimeMs,
      partsInCycle: totalParts,
      confidence: confidence
    };
  }
} 