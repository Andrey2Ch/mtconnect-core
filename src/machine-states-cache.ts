import * as fs from 'fs';
import * as path from 'path';

export interface MachineState {
  machineId: string;
  idleTimeMinutes: number;
  lastActiveTime: string;
  timestamp: string;
}

export class MachineStatesCache {
  private cacheFile: string;
  private states: Map<string, MachineState> = new Map();

  constructor(cacheFileName: string = 'machine-states.cache.json') {
    this.cacheFile = path.resolve(cacheFileName);
    console.log(`üíæ Machine States Cache: —Ñ–∞–π–ª ${this.cacheFile}`);
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—à–∏–Ω –∏–∑ –∫—ç—à–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–∏—Å—Ç–µ–º—ã
   * @returns Map —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –º–∞—à–∏–Ω
   */
  public loadStates(): Map<string, MachineState> {
    try {
      if (fs.existsSync(this.cacheFile)) {
        const data = fs.readFileSync(this.cacheFile, 'utf8');
        const statesArray: MachineState[] = JSON.parse(data);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ –≤ Map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        this.states.clear();
        statesArray.forEach(state => {
          this.states.set(state.machineId, state);
        });
        
        console.log(`üíæ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π –º–∞—à–∏–Ω –∏–∑ –∫—ç—à–∞: ${this.states.size}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        this.states.forEach((state, machineId) => {
          const missedTime = this.calculateMissedIdleTime(state.lastActiveTime);
          if (missedTime > 0) {
            console.log(`üïí ${machineId}: –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ${missedTime} –º–∏–Ω –ø—Ä–æ—Å—Ç–æ—è (–±—ã–ª–æ ${state.idleTimeMinutes} –º–∏–Ω)`);
          }
        });
        
        return this.states;
      } else {
        console.log(`üíæ –§–∞–π–ª –∫—ç—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π: ${this.cacheFile}`);
        return this.states;
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π:`, error);
      return this.states;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—à–∏–Ω –≤ –∫—ç—à
   * @param currentStates - —Ç–µ–∫—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—à–∏–Ω
   */
  public saveStates(currentStates: Map<string, MachineState>): void {
    try {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Map –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è JSON
      const statesArray = Array.from(currentStates.values());
      
      // –û–±–Ω–æ–≤–ª—è–µ–º timestamp –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
      const now = new Date().toISOString();
      statesArray.forEach(state => {
        state.timestamp = now;
      });
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
      const jsonData = JSON.stringify(statesArray, null, 2);
      fs.writeFileSync(this.cacheFile, jsonData, 'utf8');
      
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π –º–∞—à–∏–Ω –≤ –∫—ç—à: ${statesArray.length}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      this.states = new Map(currentStates);
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π:`, error);
    }
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   * @param lastActiveTime - –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–∞—à–∏–Ω—ã
   * @returns –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –º–∏–Ω—É—Ç –ø—Ä–æ—Å—Ç–æ—è
   */
  public calculateMissedIdleTime(lastActiveTime: string): number {
    try {
      const lastActive = new Date(lastActiveTime);
      const now = new Date();
      const diffMs = now.getTime() - lastActive.getTime();
      const diffMinutes = Math.floor(diffMs / (1000 * 60));
      
      // –°—á–∏—Ç–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç
      return diffMinutes > 5 ? diffMinutes : 0;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è ${lastActiveTime}:`, error);
      return 0;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã (—Å —É—á–µ—Ç–æ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
   * @param machineId - ID –º–∞—à–∏–Ω—ã
   * @returns —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –ø—Ä–æ—Å—Ç–æ—è
   */
  public getRestoredState(machineId: string): MachineState | null {
    const cachedState = this.states.get(machineId);
    if (!cachedState) {
      return null;
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É
    const missedTime = this.calculateMissedIdleTime(cachedState.lastActiveTime);
    const restoredIdleTime = cachedState.idleTimeMinutes + missedTime;

    return {
      ...cachedState,
      idleTimeMinutes: restoredIdleTime
    };
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã
   * @param machineId - ID –º–∞—à–∏–Ω—ã
   * @param idleTimeMinutes - —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è
   * @param lastActiveTime - –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   * @returns –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã
   */
  public createMachineState(
    machineId: string, 
    idleTimeMinutes: number = 0, 
    lastActiveTime: string = new Date().toISOString()
  ): MachineState {
    return {
      machineId,
      idleTimeMinutes,
      lastActiveTime,
      timestamp: new Date().toISOString()
    };
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã –≤ –∫—ç—à–µ
   * @param machineId - ID –º–∞—à–∏–Ω—ã
   * @param updates - –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
   */
  public updateMachineState(machineId: string, updates: Partial<Omit<MachineState, 'machineId'>>): void {
    const existing = this.states.get(machineId);
    if (existing) {
      this.states.set(machineId, {
        ...existing,
        ...updates,
        timestamp: new Date().toISOString()
      });
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      this.states.set(machineId, this.createMachineState(
        machineId,
        updates.idleTimeMinutes,
        updates.lastActiveTime
      ));
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—à–∏–Ω
   * @returns Map —Å–æ –≤—Å–µ–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
   */
  public getAllStates(): Map<string, MachineState> {
    return new Map(this.states);
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∫—ç—à (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  public clearCache(): void {
    this.states.clear();
    if (fs.existsSync(this.cacheFile)) {
      fs.unlinkSync(this.cacheFile);
      console.log(`üíæ –ö—ç—à –æ—á–∏—â–µ–Ω: ${this.cacheFile}`);
    }
  }
}