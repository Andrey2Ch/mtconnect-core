import * as fs from 'fs';
import * as path from 'path';
import * as net from 'net';

interface MachineConfig {
    id: string;
    name: string;
    ip: string;
    port: number;
    type: string;
    mtconnectAgentUrl: string;
    uuid: string;
    spindles: string[];
    axes: string[];
}

interface Config {
    machines: MachineConfig[];
    settings: {
        serverPort: number;
        dataUpdateInterval: number;
        connectionTimeout: number;
        maxRetries: number;
        debugDetails: boolean;
    };
}

export class MachineManager {
    private configPath: string;

    constructor(configPath: string = path.join(__dirname, 'config.json')) {
        this.configPath = configPath;
    }

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    loadConfig(): Config {
        try {
            const configData = fs.readFileSync(this.configPath, 'utf8');
            return JSON.parse(configData);
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error}`);
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    saveConfig(config: Config): void {
        try {
            fs.writeFileSync(this.configPath, JSON.stringify(config, null, 2), 'utf8');
            console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error}`);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—Ç–∞–Ω–∫—É
    async testMachineConnection(ip: string, port: number = 8193, timeout: number = 2000): Promise<boolean> {
        return new Promise((resolve) => {
            const socket = new net.Socket();
            let connected = false;

            socket.setTimeout(timeout);
            
            socket.on('connect', () => {
                connected = true;
                socket.destroy();
                resolve(true);
            });

            socket.on('timeout', () => {
                socket.destroy();
                resolve(false);
            });

            socket.on('error', () => {
                resolve(false);
            });

            socket.connect(port, ip);
        });
    }

    // –ê–≤—Ç–æ–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å—Ç–∞–Ω–∫–æ–≤ –≤ —Å–µ—Ç–∏
    async scanNetwork(baseIp: string = '192.168.1', startRange: number = 1, endRange: number = 254): Promise<string[]> {
        console.log(`üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ ${baseIp}.${startRange}-${endRange} –Ω–∞ –ø–æ—Ä—Ç—É 8193...`);
        
        const foundMachines: string[] = [];
        const promises: Promise<void>[] = [];

        for (let i = startRange; i <= endRange; i++) {
            const ip = `${baseIp}.${i}`;
            const promise = this.testMachineConnection(ip).then(connected => {
                if (connected) {
                    foundMachines.push(ip);
                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç–∞–Ω–æ–∫: ${ip}:8193`);
                }
            });
            promises.push(promise);
        }

        await Promise.all(promises);
        console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞–Ω–∫–æ–≤: ${foundMachines.length}`);
        return foundMachines.sort();
    }

    // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞–Ω–æ–∫
    addMachine(machineData: Partial<MachineConfig>): void {
        const config = this.loadConfig();
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!machineData.id || !machineData.name || !machineData.ip) {
            throw new Error('–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: id, name, ip');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ ID
        if (config.machines.find(m => m.id === machineData.id)) {
            throw new Error(`–°—Ç–∞–Ω–æ–∫ —Å ID "${machineData.id}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ IP
        if (config.machines.find(m => m.ip === machineData.ip)) {
            throw new Error(`–°—Ç–∞–Ω–æ–∫ —Å IP "${machineData.ip}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç–∞–Ω–∫–∞ —Å defaults
        const newMachine: MachineConfig = {
            id: machineData.id,
            name: machineData.name,
            ip: machineData.ip,
            port: machineData.port || 8193,
            type: machineData.type || 'CNC',
            mtconnectAgentUrl: machineData.mtconnectAgentUrl || this.generateAgentUrl(config.machines.length),
            uuid: machineData.uuid || machineData.id.toLowerCase(),
            spindles: machineData.spindles || ['S0'],
            axes: machineData.axes || ['X', 'Y', 'Z']
        };

        config.machines.push(newMachine);
        this.saveConfig(config);
        
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–∞–Ω–æ–∫: ${newMachine.name} (${newMachine.ip})`);
    }

    // –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞–Ω–æ–∫
    removeMachine(machineId: string): void {
        const config = this.loadConfig();
        const initialLength = config.machines.length;
        
        config.machines = config.machines.filter(m => m.id !== machineId);
        
        if (config.machines.length === initialLength) {
            throw new Error(`–°—Ç–∞–Ω–æ–∫ —Å ID "${machineId}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }

        this.saveConfig(config);
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω —Å—Ç–∞–Ω–æ–∫: ${machineId}`);
    }

    // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–Ω–æ–∫
    updateMachine(machineId: string, updates: Partial<MachineConfig>): void {
        const config = this.loadConfig();
        const machineIndex = config.machines.findIndex(m => m.id === machineId);
        
        if (machineIndex === -1) {
            throw new Error(`–°—Ç–∞–Ω–æ–∫ —Å ID "${machineId}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
        config.machines[machineIndex] = { ...config.machines[machineIndex], ...updates };
        this.saveConfig(config);
        
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞–Ω–æ–∫: ${machineId}`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Å—Ç–∞–Ω–∫–∏
    async validateAllMachines(): Promise<{ online: string[], offline: string[] }> {
        const config = this.loadConfig();
        const online: string[] = [];
        const offline: string[] = [];

        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ –≤—Å–µ–º —Å—Ç–∞–Ω–∫–∞–º...');

        for (const machine of config.machines) {
            const isConnected = await this.testMachineConnection(machine.ip, machine.port);
            if (isConnected) {
                online.push(`${machine.name} (${machine.ip})`);
                console.log(`‚úÖ ${machine.name} (${machine.ip}) - –ø–æ–¥–∫–ª—é—á–µ–Ω`);
            } else {
                offline.push(`${machine.name} (${machine.ip})`);
                console.log(`‚ùå ${machine.name} (${machine.ip}) - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
            }
        }

        console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${online.length} –æ–Ω–ª–∞–π–Ω, ${offline.length} –æ—Ñ–ª–∞–π–Ω`);
        return { online, offline };
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å URL –¥–ª—è MTConnect –∞–≥–µ–Ω—Ç–∞
    private generateAgentUrl(index: number): string {
        return `http://localhost:${5001 + index}`;
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–∞–Ω–∫–æ–≤
    listMachines(): MachineConfig[] {
        const config = this.loadConfig();
        return config.machines;
    }

    // –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    exportConfig(outputPath: string): void {
        const config = this.loadConfig();
        fs.writeFileSync(outputPath, JSON.stringify(config, null, 2), 'utf8');
        console.log(`‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ ${outputPath}`);
    }

    // –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    importConfig(inputPath: string): void {
        const importedConfig = JSON.parse(fs.readFileSync(inputPath, 'utf8'));
        this.saveConfig(importedConfig);
        console.log(`‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ ${inputPath}`);
    }
}

// CLI —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞–Ω–∫–∞–º–∏
export async function runMachineManagerCLI() {
    const manager = new MachineManager();
    const args = process.argv.slice(2);
    const command = args[0];

    try {
        switch (command) {
            case 'list':
                console.log('üìã –°–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω–∫–æ–≤:');
                manager.listMachines().forEach(machine => {
                    console.log(`  ${machine.id}: ${machine.name} (${machine.ip}:${machine.port})`);
                });
                break;

            case 'add':
                if (args.length < 4) {
                    console.error('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: add <id> <name> <ip> [port]');
                    process.exit(1);
                }
                manager.addMachine({
                    id: args[1],
                    name: args[2],
                    ip: args[3],
                    port: args[4] ? parseInt(args[4]) : 8193
                });
                break;

            case 'remove':
                if (args.length < 2) {
                    console.error('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: remove <id>');
                    process.exit(1);
                }
                manager.removeMachine(args[1]);
                break;

            case 'scan':
                const baseIp = args[1] || '192.168.1';
                const foundIps = await manager.scanNetwork(baseIp);
                console.log('\nüéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞:');
                foundIps.forEach(ip => console.log(`  ${ip}:8193`));
                break;

            case 'validate':
                await manager.validateAllMachines();
                break;

            case 'test':
                if (args.length < 2) {
                    console.error('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: test <ip> [port]');
                    process.exit(1);
                }
                const isConnected = await manager.testMachineConnection(args[1], args[2] ? parseInt(args[2]) : 8193);
                console.log(`${isConnected ? '‚úÖ' : '‚ùå'} ${args[1]}:${args[2] || 8193} - ${isConnected ? '–ø–æ–¥–∫–ª—é—á–µ–Ω' : '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
                break;

            default:
                console.log(`
üè≠ MTConnect Machine Manager

–ö–æ–º–∞–Ω–¥—ã:
  list                          - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—Ç–∞–Ω–∫–∏
  add <id> <name> <ip> [port]   - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞–Ω–æ–∫
  remove <id>                   - –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞–Ω–æ–∫
  scan [baseIp]                 - –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç—å –Ω–∞ —Å—Ç–∞–Ω–∫–∏
  validate                      - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Å—Ç–∞–Ω–∫–∏
  test <ip> [port]             - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π IP

–ü—Ä–∏–º–µ—Ä—ã:
  node machine-manager.js list
  node machine-manager.js add "SR-30" "SR-30" "192.168.1.200"
  node machine-manager.js scan "192.168.1"
  node machine-manager.js validate
                `);
                break;
        }
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞: ${error}`);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ CLI –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    runMachineManagerCLI();
} 