import * as Modbus from 'jsmodbus';
import * as net from 'net';

export interface AdamCounterData {
  channel: number;
  machineId: string;
  count: number;
  timestamp: string;
  // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ü–∏–∫–ª–∞
  cycleTimeMs?: number;      // –í—Ä–µ–º—è —Ü–∏–∫–ª–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (—Ç–æ—á–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ)
  partsInCycle?: number;     // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–∞–ª–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
  confidence?: string;       // –£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ä–∞—Å—á–µ—Ç–µ
}

interface CounterChangeEvent {
  timestamp: Date;
  count: number;
}

interface AdamCounterHistory {
  machineId: string;
  changes: CounterChangeEvent[];  // –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–∞
  lastKnownCount: number;         // –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  lastUpdateTime: Date;           // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
}

export class AdamReader {
  private host: string;
  private port: number;
  private channelMapping: Map<number, string>;
  private counterHistories: Map<string, AdamCounterHistory>; // –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∞–Ω–∫–∞
  private readonly MIN_PARTS_FOR_CALCULATION = 3; // –ú–∏–Ω–∏–º—É–º –¥–µ—Ç–∞–ª–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ü–∏–∫–ª–∞
  private readonly MAX_HISTORY_SIZE = 10; // –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏

  constructor(host: string = '192.168.1.120', port: number = 502) {
    this.host = host;
    this.port = port;
    this.counterHistories = new Map();
    
    // –ú–∞–ø–ø–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ —Å—Ç–∞–Ω–∫–∏ (–∏–∑ Adam-6050 –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
    this.channelMapping = new Map([
      [0, 'SR-22'],   // DI0 -> SR-22 (SR22)
      [1, 'SB-16'],   // DI1 -> SB-16 (SB16)
      [2, 'BT-38'],   // DI2 -> BT-38 (BT38)
      [3, 'K-162'],   // DI3 -> K-162 (K-162)
      [4, 'K-163'],   // DI4 -> K-163 (K-163)
      [5, 'L-20'],    // DI5 -> L-20 (L20)
      [6, 'K-16'],    // DI6 -> K-16 (K16)
      [7, ''],        // DI7 -> (–ø—É—Å—Ç–æ–π)
      [8, 'SR-20'],   // DI8 -> SR-20 (SR20)
      [9, 'SR-32'],   // DI9 -> SR-32 (SR32)
      [10, ''],       // DI10 -> (–ø—É—Å—Ç–æ–π)
      [11, 'SR-24']   // DI11 -> SR-24 (SR24) ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û!
    ]);
  }

  async readCounters(): Promise<AdamCounterData[]> {
    return new Promise((resolve, reject) => {
      const socket = new net.Socket();
      const client = new Modbus.client.TCP(socket);
      const results: AdamCounterData[] = [];

      socket.on('connect', async () => {
        try {
          console.log('‚úÖ –ü–æ–¥–∫–ª—é—á—ë–Ω –∫ Adam-6050 –¥–ª—è —á—Ç–µ–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤');
          
          // –ß–∏—Ç–∞–µ–º Input Registers (Function Code 04) - –¥–ª—è Counter —Ä–µ–∂–∏–º–∞ (32-–±–∏—Ç–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏)
          const irResult = await client.readInputRegisters(0, 24); // –ß–∏—Ç–∞–µ–º 24 —Ä–µ–≥–∏—Å—Ç—Ä–∞ –¥–ª—è 12 32-–±–∏—Ç–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤
          const irValues = irResult.response.body.valuesAsArray;
          
          // –ß–∏—Ç–∞–µ–º Discrete Inputs (Function Code 02) - –¥–ª—è Digital Input —Ä–µ–∂–∏–º–∞
          const diResult = await client.readDiscreteInputs(0, 12);
          const diValues = diResult.response.body.valuesAsArray;
          
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º 16-–±–∏—Ç–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã –≤ 32-–±–∏—Ç–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
          const counters32bit: number[] = [];
          for (let i = 0; i < 12; i++) {
            const lowWord = irValues[i * 2];     // –ú–ª–∞–¥—à–∏–µ 16 –±–∏—Ç
            const highWord = irValues[i * 2 + 1]; // –°—Ç–∞—Ä—à–∏–µ 16 –±–∏—Ç
            const counter32 = lowWord + (highWord * 65536); // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤ 32-–±–∏—Ç–Ω–æ–µ —á–∏—Å–ª–æ
            counters32bit.push(counter32);
          }
          
          console.log('üìä Input Registers (16-bit):', irValues);
          console.log('üìä 32-bit Counters:', counters32bit);
          console.log('üìä Discrete Inputs (Digital):', diValues);
          
          const currentTime = new Date();
          const timestamp = currentTime.toISOString();
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –∫–∞–Ω–∞–ª—ã –≤ –∫–∞–∫–æ–º —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç–∞—é—Ç (–∏–∑ Adam-6050 –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
          const digitalInputChannels = new Set<string>(); // –ù–µ—Ç —Å—Ç–∞–Ω–∫–æ–≤ –≤ Digital Input —Ä–µ–∂–∏–º–µ
          const counterChannels = new Set<string>([
            'SR-22', 'SB-16', 'BT-38', 'K-162', 'K-163', 
            'L-20', 'K-16', 'SR-20', 'SR-32', 'SR-24'
          ]); // –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏ –≤ Counter —Ä–µ–∂–∏–º–µ
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
          for (let i = 0; i < 12; i++) {
            const machineId = this.channelMapping.get(i);
            if (machineId && machineId !== '') {
              
              // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –º–∞—à–∏–Ω—ã
              let currentCount: number;
              let dataType: string;
              
              if (digitalInputChannels.has(machineId)) {
                // Digital Input —Ä–µ–∂–∏–º - —á–∏—Ç–∞–µ–º Discrete Inputs
                currentCount = diValues[i] ? 1 : 0; // Discrete Input –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç boolean
                dataType = 'Digital Input';
              } else if (counterChannels.has(machineId)) {
                // Counter —Ä–µ–∂–∏–º - —á–∏—Ç–∞–µ–º 32-–±–∏—Ç–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ ‚úÖ
                currentCount = counters32bit[i];
                dataType = 'Counter (32-bit)';
              } else {
                // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–∞—à–∏–Ω –ø—Ä–æ–±—É–µ–º Counter —Ä–µ–∂–∏–º
                currentCount = counters32bit[i];
                dataType = 'Unknown (32-bit Counter)';
              }
              
              // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
              const formattedCount = currentCount.toLocaleString();
              console.log(`üìä ${machineId}: ${dataType} = ${formattedCount}`);
              
              // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–∞–Ω–∫–∞
              let history = this.counterHistories.get(machineId);
              if (!history) {
                history = {
                  machineId: machineId,
                  changes: [],
                  lastKnownCount: currentCount,
                  lastUpdateTime: currentTime
                };
                this.counterHistories.set(machineId, history);
                console.log(`üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è ${machineId} (${dataType}), –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${currentCount.toLocaleString()}`);
                continue;
              }
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å—á–µ—Ç—á–∏–∫
              if (currentCount > history.lastKnownCount) {
                const newParts = currentCount - history.lastKnownCount;
                
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
                history.changes.push({
                  timestamp: currentTime,
                  count: currentCount
                });
                
                console.log(`üîÑ ${machineId}: ${dataType} –∏–∑–º–µ–Ω–∏–ª—Å—è —Å ${history.lastKnownCount.toLocaleString()} –Ω–∞ ${currentCount.toLocaleString()} (+${newParts}) –≤ ${currentTime.toLocaleTimeString()}`);
                
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
                if (history.changes.length > this.MAX_HISTORY_SIZE) {
                  history.changes.shift(); // –£–¥–∞–ª—è–µ–º —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å
                }
                
                history.lastKnownCount = currentCount;
                history.lastUpdateTime = currentTime;
              } else {
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Digital Input —Ä–µ–∂–∏–º–∞
                if (digitalInputChannels.has(machineId)) {
                  const timeSinceLastUpdate = Math.round((currentTime.getTime() - history.lastUpdateTime.getTime()) / 1000);
                  console.log(`üìç ${machineId}: Digital Input = ${currentCount} (${timeSinceLastUpdate}—Å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)`);
                  
                  // Digital Input –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ 0 –∏–ª–∏ 1
                  if (currentCount !== 0 && currentCount !== 1) {
                    console.log(`‚ö†Ô∏è ${machineId}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è Digital Input: ${currentCount} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0 –∏–ª–∏ 1)`);
                  }
                } else {
                  // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ (Counter —Ä–µ–∂–∏–º)
                  history.lastUpdateTime = currentTime;
                }
              }
              
              // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å—á–µ—Ç—á–∏–∫ –º–æ–≥ —Å–±—Ä–æ—Å–∏—Ç—å—Å—è (—É–º–µ–Ω—å—à–∏—Ç—å—Å—è)
              if (currentCount < history.lastKnownCount) {
                console.log(`üîÑ ${machineId}: ${dataType} –°–ë–†–û–®–ï–ù —Å ${history.lastKnownCount.toLocaleString()} –Ω–∞ ${currentCount.toLocaleString()} (–≤–æ–∑–º–æ–∂–Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ —Å–±—Ä–æ—Å)`);
                history.lastKnownCount = currentCount;
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—á–µ—Ç—á–∏–∫–∞
                history.changes = [];
              }
              
              // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Ü–∏–∫–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏
              let cycleTimeMs: number | undefined;
              let partsInCycle: number | undefined;
              let confidence: string | undefined;
              
              if (digitalInputChannels.has(machineId)) {
                // –î–ª—è Digital Input —Ä–µ–∂–∏–º–∞ –Ω–µ –≤—ã—á–∏—Å–ª—è–µ–º cycle time
                cycleTimeMs = undefined;
                partsInCycle = 0;
                confidence = `Digital Input (${currentCount === 1 ? '–ê–ö–¢–ò–í–ï–ù' : '–ù–ï–ê–ö–¢–ò–í–ï–ù'})`;
              } else {
                // –î–ª—è Counter —Ä–µ–∂–∏–º–∞ –≤—ã—á–∏—Å–ª—è–µ–º cycle time
                const cycleData = this.calculateCycleTime(history);
                cycleTimeMs = cycleData.cycleTimeMs;
                partsInCycle = cycleData.partsInCycle;
                confidence = cycleData.confidence;
              }
              
              results.push({
                channel: i,
                machineId: machineId,
                count: currentCount,
                timestamp: timestamp,
                cycleTimeMs: cycleTimeMs,
                partsInCycle: partsInCycle,
                confidence: confidence
              });
            }
          }
          
          console.log(`üìä –ü—Ä–æ—á–∏—Ç–∞–Ω–æ ${results.length} —Å—á—ë—Ç—á–∏–∫–æ–≤ —Å Adam-6050`);
          socket.end();
          resolve(results);
          
        } catch (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤:', err);
          socket.end();
          reject(err);
        }
      });

      socket.on('error', (err) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Adam-6050:', err);
        reject(err);
      });

      socket.connect({ host: this.host, port: this.port });
    });
  }

  private calculateCycleTime(history: AdamCounterHistory): { cycleTimeMs?: number, partsInCycle?: number, confidence?: string } {
    // –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
    if (history.changes.length < this.MIN_PARTS_FOR_CALCULATION) {
      return { 
        cycleTimeMs: undefined, 
        partsInCycle: history.changes.length,
        confidence: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö (${history.changes.length}/${this.MIN_PARTS_FOR_CALCULATION})`
      };
    }
    
    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    const firstChange = history.changes[0];
    const lastChange = history.changes[history.changes.length - 1];
    
    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
    const totalTimeMs = lastChange.timestamp.getTime() - firstChange.timestamp.getTime();
    const totalParts = lastChange.count - firstChange.count;
    
    if (totalParts <= 0) {
      return { 
        cycleTimeMs: undefined, 
        partsInCycle: totalParts,
        confidence: '–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–∞'
      };
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –æ–¥–Ω—É –¥–µ—Ç–∞–ª—å
    const avgCycleTimeMs = totalTimeMs / totalParts;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    let confidence = '–ù–ò–ó–ö–ê–Ø';
    if (history.changes.length >= 5) {
      confidence = '–í–´–°–û–ö–ê–Ø';
    } else if (history.changes.length >= 3) {
      confidence = '–°–†–ï–î–ù–Ø–Ø';
    }
    
    console.log(`‚è±Ô∏è ${history.machineId}: ${totalParts} –¥–µ—Ç. –∑–∞ ${(totalTimeMs/1000).toFixed(1)} —Å–µ–∫ = ${(avgCycleTimeMs/1000).toFixed(2)} —Å–µ–∫/–¥–µ—Ç (${confidence})`);
    
    return {
      cycleTimeMs: avgCycleTimeMs,
      partsInCycle: totalParts,
      confidence: confidence
    };
  }

  async testConnection(): Promise<boolean> {
    try {
      const data = await this.readCounters();
      return data.length > 0;
    } catch (err) {
      return false;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∏—Å—Ç–æ—Ä–∏–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  resetHistory(): void {
    this.counterHistories.clear();
    console.log('üîÑ –ò—Å—Ç–æ—Ä–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ Adam-6050 —Å–±—Ä–æ—à–µ–Ω–∞');
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  getHistory(): Map<string, AdamCounterHistory> {
    return new Map(this.counterHistories);
  }
} 