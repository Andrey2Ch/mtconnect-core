import * as Modbus from 'jsmodbus';
import * as net from 'net';
import { CycleTimeCalculator } from './cycle-time-calculator';

export interface AdamCounterData {
  channel: number;
  machineId: string;
  count: number;
  timestamp: string;
  // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ü–∏–∫–ª–∞
  cycleTimeMs?: number;      // –í—Ä–µ–º—è —Ü–∏–∫–ª–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (—Ç–æ—á–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ)
  partsInCycle?: number;     // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–∞–ª–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
  confidence?: string;       // –£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ä–∞—Å—á–µ—Ç–µ
  isAnomalous?: boolean;     // –§–ª–∞–≥ –∞–Ω–æ–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ü–∏–∫–ª–∞ (–ø—Ä–æ—Å—Ç–æ–π)
  machineStatus?: 'ACTIVE' | 'IDLE' | 'OFFLINE';  // –£–º–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å—Ç–∞–Ω–∫–∞
}

// –£–¥–∞–ª–µ–Ω - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º CycleTimeCalculator

export class AdamReader {
  private host: string;
  private port: number;
  private channelMapping: Map<number, string>;
  private cycleTimeCalculator: CycleTimeCalculator;

  constructor(host: string = '192.168.1.120', port: number = 502) {
    this.host = host;
    this.port = port;
    this.cycleTimeCalculator = new CycleTimeCalculator();
    
    // –ú–∞–ø–ø–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ —Å—Ç–∞–Ω–∫–∏ (–∏–∑ Adam-6050 –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
    this.channelMapping = new Map([
      [0, 'SR-22'],   // DI0 -> SR-22 (SR22)
      [1, 'SB-16'],   // DI1 -> SB-16 (SB16)
      [2, 'BT-38'],   // DI2 -> BT-38 (BT38)
      [3, 'K-162'],   // DI3 -> K-162 (K-162)
      [4, 'K-163'],   // DI4 -> K-163 (K-163)
      [5, 'L-20'],    // DI5 -> L-20 (L20)
      [6, 'K-16'],    // DI6 -> K-16 (K16)
      [7, ''],        // DI7 -> (–ø—É—Å—Ç–æ–π)
      [8, 'SR-20'],   // DI8 -> SR-20 (SR20)
      [9, 'SR-32'],   // DI9 -> SR-32 (SR32)
      [10, ''],       // DI10 -> (–ø—É—Å—Ç–æ–π)
      [11, 'SR-24']   // DI11 -> SR-24 (SR24) ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û!
    ]);
  }

  async readCounters(): Promise<AdamCounterData[]> {
    return new Promise((resolve, reject) => {
      const socket = new net.Socket();
      const client = new Modbus.client.TCP(socket);
      const results: AdamCounterData[] = [];

      socket.on('connect', async () => {
        try {
          console.log('‚úÖ –ü–æ–¥–∫–ª—é—á—ë–Ω –∫ Adam-6050 –¥–ª—è —á—Ç–µ–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤');
          
          // –ß–∏—Ç–∞–µ–º Input Registers (Function Code 04) - –¥–ª—è Counter —Ä–µ–∂–∏–º–∞ (32-–±–∏—Ç–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏)
          const irResult = await client.readInputRegisters(0, 24); // –ß–∏—Ç–∞–µ–º 24 —Ä–µ–≥–∏—Å—Ç—Ä–∞ –¥–ª—è 12 32-–±–∏—Ç–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤
          const irValues = irResult.response.body.valuesAsArray;
          
          // –ß–∏—Ç–∞–µ–º Discrete Inputs (Function Code 02) - –¥–ª—è Digital Input —Ä–µ–∂–∏–º–∞
          const diResult = await client.readDiscreteInputs(0, 12);
          const diValues = diResult.response.body.valuesAsArray;
          
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º 16-–±–∏—Ç–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã –≤ 32-–±–∏—Ç–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
          const counters32bit: number[] = [];
          for (let i = 0; i < 12; i++) {
            const lowWord = irValues[i * 2];     // –ú–ª–∞–¥—à–∏–µ 16 –±–∏—Ç
            const highWord = irValues[i * 2 + 1]; // –°—Ç–∞—Ä—à–∏–µ 16 –±–∏—Ç
            const counter32 = lowWord + (highWord * 65536); // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤ 32-–±–∏—Ç–Ω–æ–µ —á–∏—Å–ª–æ
            counters32bit.push(counter32);
          }
          
          console.log('üìä Input Registers (16-bit):', irValues);
          console.log('üìä 32-bit Counters:', counters32bit);
          console.log('üìä Discrete Inputs (Digital):', diValues);
          
          const currentTime = new Date();
          const timestamp = currentTime.toISOString();
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –∫–∞–Ω–∞–ª—ã –≤ –∫–∞–∫–æ–º —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç–∞—é—Ç (–∏–∑ Adam-6050 –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
          const digitalInputChannels = new Set<string>(); // –ù–µ—Ç —Å—Ç–∞–Ω–∫–æ–≤ –≤ Digital Input —Ä–µ–∂–∏–º–µ
          const counterChannels = new Set<string>([
            'SR-22', 'SB-16', 'BT-38', 'K-162', 'K-163', 
            'L-20', 'K-16', 'SR-20', 'SR-32', 'SR-24'
          ]); // –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏ –≤ Counter —Ä–µ–∂–∏–º–µ
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
          for (let i = 0; i < 12; i++) {
            const machineId = this.channelMapping.get(i);
            if (machineId && machineId !== '') {
              
              // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –º–∞—à–∏–Ω—ã
              let currentCount: number;
              let dataType: string;
              
              if (digitalInputChannels.has(machineId)) {
                // Digital Input —Ä–µ–∂–∏–º - —á–∏—Ç–∞–µ–º Discrete Inputs
                currentCount = diValues[i] ? 1 : 0; // Discrete Input –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç boolean
                dataType = 'Digital Input';
              } else if (counterChannels.has(machineId)) {
                // Counter —Ä–µ–∂–∏–º - —á–∏—Ç–∞–µ–º 32-–±–∏—Ç–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ ‚úÖ
                currentCount = counters32bit[i];
                dataType = 'Counter (32-bit)';
              } else {
                // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–∞—à–∏–Ω –ø—Ä–æ–±—É–µ–º Counter —Ä–µ–∂–∏–º
                currentCount = counters32bit[i];
                dataType = 'Unknown (32-bit Counter)';
              }
              
              // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
              const formattedCount = currentCount.toLocaleString();
              console.log(`üìä ${machineId}: ${dataType} = ${formattedCount}`);
              
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ
              this.cycleTimeCalculator.updateCount(machineId, currentCount);
              
              // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Ü–∏–∫–ª–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
              let cycleTimeMs: number | undefined;
              let partsInCycle: number | undefined;
              let confidence: string | undefined;
              let isAnomalous: boolean | undefined;
              let machineStatus: 'ACTIVE' | 'IDLE' | 'OFFLINE' | undefined;
              
              if (digitalInputChannels.has(machineId)) {
                // –î–ª—è Digital Input —Ä–µ–∂–∏–º–∞ –Ω–µ –≤—ã—á–∏—Å–ª—è–µ–º cycle time
                cycleTimeMs = undefined;
                partsInCycle = 0;
                confidence = `Digital Input (${currentCount === 1 ? '–ê–ö–¢–ò–í–ï–ù' : '–ù–ï–ê–ö–¢–ò–í–ï–ù'})`;
                isAnomalous = false;
                machineStatus = currentCount === 1 ? 'ACTIVE' : 'IDLE';
              } else {
                // –î–ª—è Counter —Ä–µ–∂–∏–º–∞ –≤—ã—á–∏—Å–ª—è–µ–º cycle time –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
                const cycleData = this.cycleTimeCalculator.getCycleTime(machineId);
                cycleTimeMs = cycleData.cycleTimeMs;
                partsInCycle = cycleData.partsInCycle;
                confidence = cycleData.confidence;
                isAnomalous = cycleData.isAnomalous;
                machineStatus = cycleData.machineStatus;
                
                // ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –µ—Å–ª–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ü–∏–∫–ª–∞ –≤–æ–æ–±—â–µ = –ü–†–û–°–¢–û–ô
                if (!cycleTimeMs || cycleData.confidence === '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö') {
                  machineStatus = 'IDLE'; // –ù–µ—Ç –¥–≤–∏–∂–µ–Ω–∏—è = –ø—Ä–æ—Å—Ç–æ–π
                  console.log(`üü° ${machineId}: –ü–†–û–°–¢–û–ô - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ü–∏–∫–ª–∞`);
                }
              }
              
              results.push({
                channel: i,
                machineId: machineId,
                count: currentCount,
                timestamp: timestamp,
                cycleTimeMs: cycleTimeMs,
                partsInCycle: partsInCycle,
                confidence: confidence,
                isAnomalous: isAnomalous,
                machineStatus: machineStatus
              });
            }
          }
          
          console.log(`üìä –ü—Ä–æ—á–∏—Ç–∞–Ω–æ ${results.length} —Å—á—ë—Ç—á–∏–∫–æ–≤ —Å Adam-6050`);
          socket.end();
          resolve(results);
          
        } catch (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤:', err);
          socket.end();
          reject(err);
        }
      });

      socket.on('error', (err) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Adam-6050:', err);
        reject(err);
      });

      socket.connect({ host: this.host, port: this.port });
    });
  }

  async testConnection(): Promise<boolean> {
    try {
      const data = await this.readCounters();
      return data.length > 0;
    } catch (err) {
      return false;
    }
  }
} 