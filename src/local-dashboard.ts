import express from 'express';
import cors from 'cors';
import path from 'path';
import fs from 'fs';
import axios from 'axios';

const app = express();
const PORT = 5000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, '..', 'public')));

// –î–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
let machineData: any[] = [];
let lastDataUpdate = new Date();

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const configPath = path.join(__dirname, 'config.json');
let localConfig: any = {};

try {
  const configData = fs.readFileSync(configPath, 'utf8');
  localConfig = JSON.parse(configData);
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
  process.exit(1);
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ø–æ–∫–∞ MTConnect –∞–≥–µ–Ω—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã)
function generateMockData(machine: any) {
  const isOnline = Math.random() > 0.2; // 80% –º–∞—à–∏–Ω –æ–Ω–ª–∞–π–Ω
  
  if (!isOnline) {
    return {
      availability: 'UNAVAILABLE',
      executionStatus: 'INACTIVE',
      partCount: 0,
      cycleTime: 0,
      program: '',
      block: '',
      line: ''
    };
  }

  const statuses = ['ACTIVE', 'IDLE', 'FEED_HOLD'];
  const programs = ['O1001', 'O1002', 'O1003', 'O1004'];
  
  return {
    availability: 'AVAILABLE',
    executionStatus: statuses[Math.floor(Math.random() * statuses.length)],
    partCount: Math.floor(Math.random() * 100) + 1,
    cycleTime: Math.round((Math.random() * 120 + 30) * 100) / 100, // 30-150 —Å–µ–∫—É–Ω–¥
    program: programs[Math.floor(Math.random() * programs.length)],
    block: `N${Math.floor(Math.random() * 999) + 1}`,
    line: `${Math.floor(Math.random() * 999) + 1}`
  };
}

// –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å –º–∞—à–∏–Ω
async function collectMachineData() {
  const collectedData = [];
  
  for (const machine of localConfig.machines) {
    try {
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      const data = generateMockData(machine);
      
      collectedData.push({
        machineId: machine.id,
        machineName: machine.name,
        timestamp: new Date().toISOString(),
        data: data
      });
      
      console.log(`‚úÖ ${machine.id}: ${data.executionStatus} | Parts: ${data.partCount} | Cycle: ${data.cycleTime}s`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å ${machine.id}:`, error);
      collectedData.push({
        machineId: machine.id,
        machineName: machine.name,
        timestamp: new Date().toISOString(),
        data: { 
          availability: 'UNAVAILABLE',
          executionStatus: 'INACTIVE',
          partCount: 0,
          cycleTime: 0
        }
      });
    }
  }
  
  machineData = collectedData;
  lastDataUpdate = new Date();
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Railway
  await sendToRailway(collectedData);
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Railway
async function sendToRailway(data: any[]) {
  if (!localConfig.railway || !localConfig.railway.enabled) {
    console.log('üîÑ Railway –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    return;
  }

  try {
    const railwayData = {
      edgeGatewayId: 'edge-gateway-local',
      timestamp: new Date().toISOString(),
      data: data
    };

    const response = await axios.post(
      `${localConfig.railway.baseUrl}/api/ext/data`,
      railwayData,
      {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localConfig.railway.apiKey}`
        },
        timeout: 5000
      }
    );

    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Railway:', response.data);
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Railway:');
    console.error(`üîó URL: ${localConfig.railway.baseUrl}/api/ext/data`);
    console.error(`üìù –°—Ç–∞—Ç—É—Å: ${error.response?.status || 'N/A'}`);
    console.error(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.response?.data || error.message || error.toString()}`);
  }
}

// API —Ä–æ—É—Ç—ã
app.get('/api/machines', (req, res) => {
  res.json({
    machines: machineData,
    lastUpdate: lastDataUpdate,
    totalMachines: localConfig.machines.length
  });
});

// Endpoint –¥–ª—è MTConnect –¥–∞–Ω–Ω—ã—Ö (–æ–∂–∏–¥–∞–µ—Ç—Å—è –¥–∞—à–±–æ—Ä–¥–æ–º)
app.get('/current', (req, res) => {
  res.set('Content-Type', 'application/xml');
  
  const timestamp = lastDataUpdate.toISOString();
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º XML –¥–ª—è –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω—ã
  const deviceStreamsXml = machineData.map(machine => {
    const availability = machine.data.availability || 'AVAILABLE';
    const execution = machine.data.executionStatus || 'IDLE';
    const program = machine.data.program || 'O1001';
    const partCount = machine.data.partCount || 0;
    const cycleTime = machine.data.cycleTime || 0;
    
    return `<DeviceStream name="${machine.machineName}" uuid="${machine.machineId}" timestamp="${machine.timestamp}">
      <ComponentStream name="controller" component="Controller">
        <Events>
          <Availability dataItemId="avail" timestamp="${machine.timestamp}" name="avail">${availability}</Availability>
          <Execution dataItemId="execution" timestamp="${machine.timestamp}" name="execution">${execution}</Execution>
          <Program dataItemId="program" timestamp="${machine.timestamp}" name="program">${program}</Program>
        </Events>
      </ComponentStream>
      <ComponentStream name="path" component="Path">
        <Events>
          <Execution dataItemId="execution" timestamp="${machine.timestamp}" name="execution">${execution}</Execution>
          <Program dataItemId="program" timestamp="${machine.timestamp}" name="program">${program}</Program>
        </Events>
        <Samples>
          <PartCount dataItemId="part_count" timestamp="${machine.timestamp}" name="part_count">${partCount}</PartCount>
          <ProcessTimer dataItemId="cycle_time_avg" timestamp="${machine.timestamp}" name="CycleTime" subType="AVERAGE">${cycleTime}</ProcessTimer>
        </Samples>
      </ComponentStream>
    </DeviceStream>`;
  }).join('\n        ');

  const xml = `<?xml version="1.0" encoding="UTF-8"?>
<MTConnectStreams xmlns="urn:mtconnect.org:MTConnectStreams:1.3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:mtconnect.org:MTConnectStreams:1.3 http://www.mtconnect.org/schemas/MTConnectStreams_1.3.xsd">
    <Header creationTime="${timestamp}" sender="MTConnect Local Agent" instanceId="1" version="1.3.0" bufferSize="131072" firstSequence="1" lastSequence="${machineData.length}" nextSequence="${machineData.length + 1}"/>
    <Streams>
        ${deviceStreamsXml}
    </Streams>
</MTConnectStreams>`;

  res.send(xml);
});

// Endpoint –¥–ª—è ADAM –¥–∞–Ω–Ω—ã—Ö
app.get('/api/adam/counters', (req, res) => {
  // –°–æ–∑–¥–∞–µ–º ADAM –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –º–∞—à–∏–Ω (–∏–º–∏—Ç–∏—Ä—É–µ–º —á—Ç–æ –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ –∫–∞–Ω–∞–ª—ã)
  const adamData = localConfig.machines.map((machine: any, index: number) => {
    const machineData = getMachineData(machine.id);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    let activityStatus = 'adam-online';
    let activityText = '–û–Ω–ª–∞–π–Ω';
    let confidence = '–í–´–°–û–ö–ê–Ø';
    let cycleTimeMs = null;
    
    if (machineData && machineData.data.executionStatus === 'ACTIVE') {
      activityStatus = 'adam-producing';
      activityText = '–ü–†–û–ò–ó–í–û–î–ò–¢';
      cycleTimeMs = machineData.data.cycleTime * 1000; // —Å–µ–∫—É–Ω–¥—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
      confidence = '–í–´–°–û–ö–ê–Ø';
    } else if (machineData && machineData.data.executionStatus === 'IDLE') {
      activityStatus = 'adam-active';
      activityText = '–ê–ö–¢–ò–í–ï–ù';
      confidence = '–°–†–ï–î–ù–Ø–Ø';
    }
    
    return {
      channel: index + 1, // –∫–∞–Ω–∞–ª—ã 1-10
      machineId: machine.id,
      machineName: machine.name,
      count: machineData ? machineData.data.partCount : 0,
      lastUpdate: machineData ? machineData.timestamp : new Date().toISOString(),
      status: machineData && machineData.data.availability === 'AVAILABLE' ? 'connected' : 'disconnected',
      cycleTimeMs: cycleTimeMs,
      confidence: confidence,
      partsInCycle: machineData ? Math.floor(machineData.data.partCount / 10) : 0,
      timestamp: machineData ? machineData.timestamp : new Date().toISOString()
    };
  });

  res.json({
    counters: adamData,
    totalChannels: 10,
    activeChannels: adamData.filter((d: any) => d.status === 'connected').length,
    lastUpdate: lastDataUpdate.toISOString()
  });
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–∞—à–∏–Ω—ã
function getMachineData(machineId: string) {
  return machineData.find(m => m.machineId === machineId);
}

// Endpoint –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è dashboard-pro.html)
app.get('/status', (req, res) => {
  const onlineMachines = machineData.filter(m => m.data.availability === 'AVAILABLE').length;
  const activeMachines = machineData.filter(m => m.data.executionStatus === 'ACTIVE').length;
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è MTConnect –∞–≥–µ–Ω—Ç–æ–≤
  const mtconnectAgents = localConfig.machines.map((machine: any) => ({
    id: machine.id,
    name: machine.name,
    status: 'OK', // –ü–æ–∫–∞ –≤—Å–µ OK, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    responseTime: Math.floor(Math.random() * 50) + 10, // 10-60ms
    error: null,
    url: machine.mtconnectAgentUrl || 'mock'
  }));
  
  res.json({
    timestamp: new Date().toISOString(),
    server: {
      status: 'OK',
      uptime: process.uptime(),
      memory: {
        heapUsed: process.memoryUsage().heapUsed,
        heapTotal: process.memoryUsage().heapTotal,
        external: process.memoryUsage().external,
        rss: process.memoryUsage().rss
      }
    },
    adam6050: {
      status: 'OK',
      error: null,
      counters: 2, // K-16 –∏ L-20
      host: '192.168.1.100:502'
    },
    mtconnectAgents: mtconnectAgents,
    railway: {
      status: localConfig.railway?.enabled ? 'enabled' : 'disabled',
      url: localConfig.railway?.baseUrl,
      lastSyncAttempt: lastDataUpdate.toISOString()
    },
    overview: {
      totalMachines: machineData.length,
      onlineMachines: onlineMachines,
      activeMachines: activeMachines,
      productionRate: Math.round((activeMachines / machineData.length) * 100)
    }
  });
});

app.get('/api/machines/:id', (req, res) => {
  const machineId = req.params.id;
  const machine = machineData.find(m => m.machineId === machineId);
  
  if (!machine) {
    return res.status(404).json({ error: 'Machine not found' });
  }
  
  res.json(machine);
});

app.get('/api/status', (req, res) => {
  res.json({
    status: 'ok',
    service: 'MTConnect Edge Gateway',
    timestamp: new Date().toISOString(),
    dataLastUpdate: lastDataUpdate,
    machineCount: machineData.length,
    railwayEnabled: localConfig.railway?.enabled || false
  });
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –¥–∞—à–±–æ—Ä–¥
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'cloud-api', 'mtconnect-cloud', 'public', 'dashboard-pro.html'));
});

// –û—Ç–¥–µ–ª—å–Ω—ã–π endpoint –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
app.get('/dashboard-pro.html', (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'cloud-api', 'mtconnect-cloud', 'public', 'dashboard-pro.html'));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ MTConnect Edge Gateway –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
  console.log(`üìä –î–∞—à–±–æ—Ä–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
  console.log(`üîÑ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å ${localConfig.machines.length} –º–∞—à–∏–Ω...`);
  
  // –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
  collectMachineData();
  
  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
  setInterval(collectMachineData, localConfig.settings.dataUpdateInterval || 5000);
}); 