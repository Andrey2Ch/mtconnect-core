import * as net from 'net';
import { EventEmitter } from 'events';

export interface SHDRDataItem {
    timestamp: string;
    device: string;
    dataItem: string;
    value: string;
}

interface PartCountHistory {
    machineId: string;
    changes: Array<{
        timestamp: Date;
        count: number;
        delta: number;
    }>;
    lastCount?: number;
    initialized: boolean;
}

export interface SHDRConnectionConfig {
    ip: string;
    port: number;
    machineId: string;
    machineName: string;
    reconnectInterval?: number;
    timeout?: number;
}

export class SHDRClient extends EventEmitter {
    private socket: net.Socket | null = null;
    private config: SHDRConnectionConfig;
    private reconnectTimer: NodeJS.Timeout | null = null;
    private isConnected: boolean = false;
    private reconnectAttempts: number = 0;
    private maxReconnectAttempts: number = 5;
    private buffer: string = '';
    private partCountHistory: PartCountHistory;

    constructor(config: SHDRConnectionConfig) {
        super();
        this.config = {
            reconnectInterval: 5000,
            timeout: 10000,
            ...config
        };
        this.partCountHistory = {
            machineId: config.machineId,
            changes: [],
            initialized: false
        };
    }

    public connect(): void {
        if (this.socket && !this.socket.destroyed) {
            this.socket.destroy();
        }

        this.socket = new net.Socket();
        this.socket.setTimeout(this.config.timeout!);

        this.socket.on('connect', () => {
            console.log(`‚úÖ SHDR –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ ${this.config.machineName} (${this.config.ip}:${this.config.port})`);
            this.isConnected = true;
            this.reconnectAttempts = 0;
            this.emit('connect');
        });

        this.socket.on('data', (chunk) => {
            this.handleData(chunk);
        });

        this.socket.on('timeout', () => {
            console.log(`‚è∞ SHDR timeout –¥–ª—è ${this.config.machineName}`);
            this.handleDisconnect();
        });

        this.socket.on('error', (error) => {
            console.log(`‚ùå SHDR –æ—à–∏–±–∫–∞ –¥–ª—è ${this.config.machineName}: ${error.message}`);
            this.emit('error', error);
            this.handleDisconnect();
        });

        this.socket.on('close', () => {
            console.log(`üîå SHDR —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –¥–ª—è ${this.config.machineName}`);
            this.handleDisconnect();
        });

        console.log(`üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ SHDR –∫ ${this.config.machineName} (${this.config.ip}:${this.config.port})...`);
        this.socket.connect(this.config.port, this.config.ip);
    }

    private handleData(chunk: Buffer): void {
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫ –±—É—Ñ–µ—Ä—É
        this.buffer += chunk.toString();
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        const lines = this.buffer.split('\n');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–ø–æ–ª–Ω—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –≤ –±—É—Ñ–µ—Ä–µ
        this.buffer = lines.pop() || '';
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        lines.forEach(line => {
            if (line.trim()) {
                this.parseSHDRLine(line.trim());
            }
        });
    }

    private parseSHDRLine(line: string): void {
        const parts = line.split('|');
        
        if (parts.length < 2) {
            console.warn(`‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç SHDR –¥–ª—è ${this.config.machineName}: ${line}`);
            return;
        }

        const timestamp = parts[0];
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø–∞—Ä—ã dataItem|value, –Ω–∞—á–∏–Ω–∞—è —Å –∏–Ω–¥–µ–∫—Å–∞ 1
        for (let i = 1; i < parts.length; i += 2) {
            if (i + 1 >= parts.length) break; // –ù–µ—Ç –ø–∞—Ä—ã –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            
            const dataItemName = parts[i];
            const dataItemValue = parts[i + 1];
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã - —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤
            let processedDataItem = dataItemName;
            let processedValue = dataItemValue;
            
            // –î–ª—è SR-23 –∏ SR-25: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç program = O0030(1211-39)
            if (dataItemName === 'program' && (this.config.machineName === 'SR-23' || this.config.machineName === 'SR-25')) {
                const programMatch = dataItemValue.match(/^O(\d+)\(([^)]+)\)$/);
                if (programMatch) {
                    // –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É —Å –¥–µ—Ñ–∏—Å–æ–º –≤ –Ω–∞—á–∞–ª–µ (2-753-04 -> 753-04)
                    let programName = programMatch[2];
                    programName = programName.replace(/^(\d-|<)/, ''); // –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞!
                    programName = programName.replace(/(\+[^>]*>?|>)$/, '');
                    processedValue = programName;
                } else {
                    continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º program –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                }
            }
            // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤: –∏—Å–ø–æ–ª—å–∑—É–µ–º program_comment = % O1212(753-04)
            else if (dataItemName === 'program_comment') {
                const commentMatch = dataItemValue.match(/O\d+\(([^)]+)\)/);
                if (commentMatch) {
                    processedDataItem = 'program';
                    let programName = commentMatch[1];
                    // –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É —Å –¥–µ—Ñ–∏—Å–æ–º –≤ –Ω–∞—á–∞–ª–µ (2-753-04 -> 753-04) –∏–ª–∏ < –≤ –Ω–∞—á–∞–ª–µ
                    programName = programName.replace(/^(\d-|<)/, ''); // –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞!
                    programName = programName.replace(/(\+[^>]*>?|>)$/, '');
                    processedValue = programName;
                } else {
                    continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º program_comment –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                }
            }
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –º—É—Å–æ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è program –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤
            else if (dataItemName === 'program' && this.config.machineName !== 'SR-23' && this.config.machineName !== 'SR-25') {
                continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º—É—Å–æ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–∏–ø–∞ "4.0", "27.27"
            }
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const allowedDataItems = [
                'program',      // –ü—Ä–æ–≥—Ä–∞–º–º–∞ CNC
                'part_count',   // –°—á–µ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª–µ–π 
                'execution',    // –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                'execution2',   // –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è 2-–≥–æ –∫–∞–Ω–∞–ª–∞
                'availability', // –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                'block'         // –¢–µ–∫—É—â–∏–π –±–ª–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            ];
            
            if (allowedDataItems.includes(processedDataItem)) {
                const dataItem = {
                    timestamp: timestamp,
                    device: this.config.machineName,
                    dataItem: processedDataItem,
                    value: processedValue
                };
                
                // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è part_count –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ü–∏–∫–ª–∞
                if (processedDataItem === 'part_count') {
                    const partCount = parseInt(processedValue);
                    if (!isNaN(partCount)) {
                        this.updatePartCountHistory(partCount);
                    }
                }
                
                console.log(`‚úÖ SHDR ACCEPTED –¥–ª—è ${this.config.machineName}: ${processedDataItem} = ${processedValue}`);
                this.emit('data', dataItem);
            }
        }
    }

    private handleDisconnect(): void {
        this.isConnected = false;
        
        if (this.socket) {
            this.socket.destroy();
            this.socket = null;
        }

        this.emit('disconnect');
        
        // –ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if (this.reconnectAttempts < this.maxReconnectAttempts) {
            this.reconnectAttempts++;
            console.log(`üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ SHDR –∫ ${this.config.machineName} —á–µ—Ä–µ–∑ ${this.config.reconnectInterval}–º—Å (–ø–æ–ø—ã—Ç–∫–∞ ${this.reconnectAttempts}/${this.maxReconnectAttempts})`);
            
            this.reconnectTimer = setTimeout(() => {
                this.connect();
            }, this.config.reconnectInterval);
        } else {
            console.log(`‚ùå –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å—á–µ—Ä–ø–∞–Ω –¥–ª—è ${this.config.machineName}`);
            this.emit('maxReconnectAttemptsReached');
        }
    }

    public disconnect(): void {
        if (this.reconnectTimer) {
            clearTimeout(this.reconnectTimer);
            this.reconnectTimer = null;
        }

        if (this.socket) {
            this.socket.destroy();
            this.socket = null;
        }

        this.isConnected = false;
        this.reconnectAttempts = 0;
    }

    public getConnectionStatus(): boolean {
        return this.isConnected;
    }

    public getReconnectAttempts(): number {
        return this.reconnectAttempts;
    }

    getCycleTimeData(): { cycleTimeMs?: number; partsInCycle: number; confidence: string } {
        return this.calculateCycleTime();
    }

    private calculateCycleTime(): { cycleTimeMs?: number; partsInCycle: number; confidence: string } {
        const history = this.partCountHistory;
        const maxAgeMs = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
        const now = new Date();

        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        history.changes = history.changes.filter(change => 
            now.getTime() - change.timestamp.getTime() <= maxAgeMs
        );

        if (history.changes.length < 2) {
            return { 
                cycleTimeMs: undefined, 
                partsInCycle: 0,
                confidence: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö'
            };
        }

        const totalParts = history.changes.reduce((sum, change) => sum + change.delta, 0);
        const firstChange = history.changes[0];
        const lastChange = history.changes[history.changes.length - 1];
        const totalTimeMs = lastChange.timestamp.getTime() - firstChange.timestamp.getTime();

        if (totalParts <= 0 || totalTimeMs <= 0) {
            return { 
                cycleTimeMs: undefined, 
                partsInCycle: totalParts,
                confidence: '–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–∞'
            };
        }

        const avgCycleTimeMs = totalTimeMs / totalParts;

        let confidence = '–ù–ò–ó–ö–ê–Ø';
        if (history.changes.length >= 5) {
            confidence = '–í–´–°–û–ö–ê–Ø';
        } else if (history.changes.length >= 3) {
            confidence = '–°–†–ï–î–ù–Ø–Ø';
        }

        console.log(`‚è±Ô∏è ${history.machineId}: ${totalParts} –¥–µ—Ç. –∑–∞ ${(totalTimeMs/1000).toFixed(1)} —Å–µ–∫ = ${(avgCycleTimeMs/1000).toFixed(2)} —Å–µ–∫/–¥–µ—Ç (${confidence})`);

        return {
            cycleTimeMs: avgCycleTimeMs,
            partsInCycle: totalParts,
            confidence: confidence
        };
    }

    private updatePartCountHistory(newCount: number): void {
        const history = this.partCountHistory;
        const now = new Date();

        if (!history.initialized) {
            history.lastCount = newCount;
            history.initialized = true;
            console.log(`üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è ${history.machineId}, –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${newCount.toLocaleString()}`);
            return;
        }

        if (history.lastCount !== undefined && newCount !== history.lastCount) {
            const delta = newCount - history.lastCount;
            if (delta > 0) { // –¢–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                history.changes.push({
                    timestamp: now,
                    count: newCount,
                    delta: delta
                });

                console.log(`üîÑ ${history.machineId}: part_count –∏–∑–º–µ–Ω–∏–ª—Å—è —Å ${history.lastCount.toLocaleString()} –Ω–∞ ${newCount.toLocaleString()} (+${delta}) –≤ ${now.toLocaleTimeString()}`);
                
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Ü–∏–∫–ª–∞
                this.calculateCycleTime();
            }
        }

        history.lastCount = newCount;
    }
}

export class SHDRManager extends EventEmitter {
    private clients: Map<string, SHDRClient> = new Map();
    private dataStore: Map<string, Map<string, SHDRDataItem>> = new Map();

    public addMachine(config: SHDRConnectionConfig): void {
        const client = new SHDRClient(config);
        
        client.on('connect', () => {
            console.log(`üîó SHDR Manager: ${config.machineName} –ø–æ–¥–∫–ª—é—á–µ–Ω`);
            this.emit('machineConnected', config.machineId);
        });

        client.on('disconnect', () => {
            console.log(`üîå SHDR Manager: ${config.machineName} –æ—Ç–∫–ª—é—á–µ–Ω`);
            this.emit('machineDisconnected', config.machineId);
        });

        client.on('data', (dataItem: SHDRDataItem) => {
            this.updateDataStore(config.machineId, dataItem);
            this.emit('dataReceived', config.machineId, dataItem);
        });

        client.on('error', (error) => {
            this.emit('machineError', config.machineId, error);
        });

        this.clients.set(config.machineId, client);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—à–∏–Ω—ã
        if (!this.dataStore.has(config.machineId)) {
            this.dataStore.set(config.machineId, new Map());
        }
        
        client.connect();
    }

    private updateDataStore(machineId: string, dataItem: SHDRDataItem): void {
        const machineData = this.dataStore.get(machineId);
        if (machineData) {
            machineData.set(dataItem.dataItem, dataItem);
        }
    }

    public getMachineData(machineId: string): Map<string, SHDRDataItem> | undefined {
        return this.dataStore.get(machineId);
    }

    public getMachineCycleTime(machineId: string): { cycleTimeMs?: number; partsInCycle: number; confidence: string } | undefined {
        const client = this.clients.get(machineId);
        return client?.getCycleTimeData();
    }

    public getAllMachinesData(): Map<string, Map<string, SHDRDataItem>> {
        return this.dataStore;
    }

    public getMachineConnectionStatus(machineId: string): boolean {
        const client = this.clients.get(machineId);
        return client ? client.getConnectionStatus() : false;
    }

    public getAllConnectionStatuses(): Map<string, boolean> {
        const statuses = new Map<string, boolean>();
        for (const [machineId, client] of this.clients) {
            statuses.set(machineId, client.getConnectionStatus());
        }
        return statuses;
    }

    public disconnectAll(): void {
        for (const client of this.clients.values()) {
            client.disconnect();
        }
        this.clients.clear();
        this.dataStore.clear();
    }

    public getConnectedMachinesCount(): number {
        let count = 0;
        for (const client of this.clients.values()) {
            if (client.getConnectionStatus()) {
                count++;
            }
        }
        return count;
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è SHDR –¥–∞–Ω–Ω—ã—Ö –≤ MTConnect —Ñ–æ—Ä–º–∞—Ç
    public convertToMTConnectFormat(machineId: string): any {
        const machineData = this.dataStore.get(machineId);
        if (!machineData) {
            return null;
        }

        const timestamp = new Date().toISOString();
        const deviceStream = {
            $: {
                name: machineId,
                uuid: machineId.toLowerCase()
            },
            ComponentStream: [
                {
                    $: {
                        component: "Controller",
                        componentId: "controller"
                    },
                    Events: {} as { [key: string]: any },
                    Samples: {} as { [key: string]: any }
                },
                {
                    $: {
                        component: "Path", 
                        componentId: "path",
                        name: "path"
                    },
                    Events: {} as { [key: string]: any },
                    Samples: {} as { [key: string]: any }
                }
            ]
        };

        // –ú–∞–ø–ø–∏–Ω–≥ SHDR –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ MTConnect —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        for (const [dataItemName, dataItem] of machineData) {
            const mtconnectItem = {
                _: dataItem.value,
                $: {
                    dataItemId: dataItemName,
                    timestamp: dataItem.timestamp || timestamp,
                    name: dataItemName
                }
            };

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—É–¥–∞ –ø–æ–º–µ—Å—Ç–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç (Events –∏–ª–∏ Samples)
            const isEvent = ['avail', 'mode', 'exec', 'program', 'block', 'estop', 'door', 'coolant'].includes(dataItemName);
            const componentIndex = ['Xact', 'Yact', 'Zact', 'program', 'block', 'exec'].includes(dataItemName) ? 1 : 0;
            
            if (isEvent) {
                deviceStream.ComponentStream[componentIndex].Events[this.capitalizeFirst(dataItemName)] = mtconnectItem;
            } else {
                deviceStream.ComponentStream[componentIndex].Samples[this.capitalizeFirst(dataItemName)] = mtconnectItem;
            }
        }

        return deviceStream;
    }

    private capitalizeFirst(str: string): string {
        return str.charAt(0).toUpperCase() + str.slice(1);
    }
} 